import unittest
import json

from project_3 import Project3
p3 = Project3()

class Test_P3_T1(unittest.TestCase):

    def test_1(self):
        # bits: 64
        # p: 12043059124462858823
        # q: 11809743639949060997
        # n: 142225440900655753976271944781026626531
        # e: 11023340661899110981
        # d: 71301248537082207584629307993886262693
        n = '0x6aff9fa0de9cdcd790b427aef87d0be3'
        d = '0x35a41ef76dfb54300aa2541e5f6785a5'
        m = '0xd0f45a88621b958d'
        c = '0x46d6c917547f47381a13107247e6306d'

        check = p3.task_1(n, d, c)
        self.assertEqual(check, m)

    def test_2(self):
        # bits: 128
        # p: 214909574497160880125226270145057407073
        # q: 205093461727618296603129746172252759757
        # n: 44076548592032198098016382703207687614072508677539741477918848539518821561261
        # e: 173785124970567895502242666910855792357
        # d: 6609981694240189582872861221958591086305068926839961530962091018993012513517
        n = '0x6172714362ea585a9bdbe6121f3fe4ddffcff69998ea4654e198ffff22f573ad'
        d = '0xe9d1df78fe3cd5c35d3441fafef8c42093521c37bdc90e6f050b0bde05b1aed'
        m = '0xb948d5ec4e77fb0980b2aab7fd6ff1a9'
        c = '0xdef35ebbecbce8907d23ea3b78309207de211e18e2075254129e4a00c37cf6'

        check = p3.task_1(n, d, c)
        self.assertEqual(check, m)

    def test_3(self):
        # bits: 256
        # p: 105672269613118064203871017520805713190901209402645405299896035138724056688867
        # q: 78845467173021018989711691205234826293878134213274569549052615400258932951949
        # n: 8331779464879726865707427879230856668938202835452916941439809659603903670569057040768046028291537584770010198815881545158425277244561264471588750954251783
        # e: 60508254457300965779349144406254407782797745250416351816972156425322751808553
        # d: 266755174653623618146762681494532698684864413889490535917736168084196647227043056112247030018303667553898965396418023727572926629467221570367808321607273
        n = '0x9f14e3c31bd410ece7715acf867dbef6ab46ff19fe5a99302f8fef2f7051eee6b4c5c14b67577484e670a02ea5d4331701519219e2cbb222c9f3cd5ea472c607'
        d = '0x517df441dc3532be5f6853e6d839eef43dcf6e32a3b89fc02975cfe4e54da53aac1cc855190b640927fd008c90778e8a4847ab6bc6c5bd1e838ebf55287d669'
        m = '0x8754634d1f42be577d7b68c4aed4cd4b9da4565c86bccbb66d87c760d74c551f'
        c = '0x11df7d5f4000955e3db64ea6429023f1447a7eb2e05d0c152e33d7d65d6cb3905617969e487c4be0eda24ee2e4e7b864830344427d721b3e3f29077b27a3b1b0'

        check = p3.task_1(n, d, c)
        self.assertEqual(check, m)

    def test_4(self):
        # bits: 512
        # p: 13303465204389761208270737572160514180648732429151178260191136442865131278821856815495784907198193411908706950169538958067006517305940766208825059819238373
        # q: 8786524625617711310994368428321185618168897906571217460998568382635905204974251813323654674418013587262565060432317712166615997080637387939754920367496609
        # n: 116891224624418995886512152277763799688721179816320115689949393938201576908910089604596356787037280567964948881113459345327988849240418156121098707072900804304216486561616615782130642480760607463177379759362665817124175270037730528688418419589675643904170619892893995528236626141100249879918037337415040177157
        # e: 7342808780753819314763876062125217311399875107764756424113643020065625278128757972928891618745172473602417123884346631198478335840263094929759408572196257
        # d: 67432430280355449209699151178651875242640915772433494496736611249906247687660096239549279027442777682590220283211031328202738805057419922818855897036574553428524957274748875498002665868191736187152692273171349449820082865890248123385786213979872146052668105438633973222924522470177703255842783026032712626529
        n = '0xa67568b9f70a46ca15abf229513d8a7f3862ae338674c9459fc6866266f059e02a966ae08d455251a62f888eca43c28802eb5b54f429c4ac26c8543d043bd8a9e1ba34f9b430f1a2e03c9fff810bff7f462afc47296dfce599eb9f7edad84b7b644edab5431f449d7266109993a07b93fbfcb7b351d8ce1fbbf4e2f581451405'
        d = '0x6006e76387cf836ad1adb8a94479ed6ed47fedbe7eeeb9618c0a1ed90dcc755ed285b2f6f04b0456ff304b3bb7b24003674e1efdf21b7d27eae1d7a40e3fa6c0ca236916f1ffe97222ff3e3029448bee0d8a48abe32b28455c54a243c3cd053109d539b4230b4e182331b5c979024597634bf9591131fe56dbcf0ee389003161'
        m = '0x258063acf4815ca23ec0abfc29b6b2e759b5eeaefce53a16a6161026051fb06bbd22d0e0f44e52f0617bfaa8e98ad070bf8b9b92793d581cf6f90d916ce1aee4'
        c = '0x53b7ca961a6c02c5edaa7ad86878c765c4db32ae1c40c2990c036b959605f2d070133f2aad2be7621083c30bef22afb2be5e498d14ebb190bd285bfde819ce344487143b84e106ed17bfe149eb67f3e91ad348bbbeec78e6bfeab48189412ef4297e541e4e3edbe6785dae4488750a3f53e4d374afe4f400fa386e3e89d1b701'
        
        check = p3.task_1(n, d, c)
        self.assertEqual(check, m)

    def test_5(self):
        # bits: 1024
        # p: 108893803528755126118112864036416271461535671554175744184343066195307842343039810065994421291724965491533527872498777394782276043718496098994616671995416455939434622251178144712152827733866316167974521620922527459385851255837841927414439574917671137075311604893395156640047747528526537931503574730383195599357
        # q: 162857553488973002750918372639912775467800840288420660080283530875117519799162416462734798867881712056837171888293955874940685248291058671047047663846702054666101382127438769060231635056499434403597951650986310415576057810256727491862787825051787778715942995674836548578642348471463446733564905956830240497669
        # n: 17734178432801955068226195092037901100912824086872264193470074874100548606804794337922995083752370474758609899805743575630634214300995991103765248491994118575869696484673413239336713209983548424900049349978390006989468165267702041062856221458928400344885286513574465913707365255584399272976910063080612531446889830352340710270697763429965146339752745082077907706985099443523906026594434838093691858073471120748076838123019239462950568993965952121579008026268553717218458184706225107278140595102251618967602262555264928122200155011763401475927825730089488048151967365764121473876972398778673624676635879776726416398833
        # e: 152848926722884768796175197460344836009872345494254608884708743942949163314461195061298767936236247185669430195308524918541106583310265437868776824521564639434162611572278989825674648921731886849458320912923593893888838046820342345612354690648065442634958311727304707232774549010745552351199589204856047993169
        # d: 8208745350915935625028233770441861710531387044944220273805475741931070762127743670829755976457035220801888961904181016490536298171424650535189207607217997797803335891690188074605683486947861568025454394539476476884780690833528127945342491043791906040875988124185192391202580687232380654411596534900269825096590929563083946898493210760325425998411325714447868920860996449211513377669117672621087149590332694039622157155717287168995778600234070986028298727680137838773905089484884703588549221020896012405823116531539296388046978733600372713373572428896899670002457648619487134655145404016447991985724119079608859929649
        n = '0x8c7b543181561fb94096bb9b083ebbb5d6d08c0b3066fcdcdfdf7caf8ea9ba289addcea3c2b0f7ec5792b784255e9abebfd9d42119b81f7c5b907248019325ae287535aeda26f3b7568b0fafda7c380753a013d40f03f4e65a8f7d214efa47c4f3df0c046fe5c52d365d95435c4cec092abc36f817299c6c79987fd4db2285a64529eeb923fa5f3e2132aeaf8b2de29b729fa221ae534e55a9e9e82b82bc24dcff9fcc14d01685f850fafe930ec65027cddc88eb5c66603a6980896a418f959a2519453f74f7df301175b34a8cca8e3c5686a0236f6a2f4c434194553ec0992c1b819edf27ac52f0b929944d1fdcd908e7951420665ad3cb12b0afee674099f1'
        d = '0x41069a176f0b0e9c5df9ec7507aaf58abb268b12302c682fd6f2354b706bf60be92e703039268778085d8298024ba923ea4df270a54a569ea8043fd3e106e412371fbb5c45f64e89fe30ddfbfbaeb750ef70f755f9bd8ccc814f770d5862e7cdb3aae877c513bd98bf757d187cf92d380ca7c1b9ba570f7afb42d94c4dd4717fbd33da2759195c561f1b044d514b87aa2fa068933ad38f4eb6910fcc302b7bbb1771498d7731445410b37d4f41527c2b79f337ceed8475d26d18fb05531f3b985b3e064575e63bf27ab4f190c79fc49a75cdb7aec164bb30107322e3acc06f560b3c1d0f23b99dc464f3596b3f672fa4caab5cb9ec76f6c0a3eb42e84d86ac31'
        m = '0xda8b12c8c4088caf7518579ac9a65e0e8d1b2b1c45ae1f319b52e096f1987868f71d0af6b33c16aed91f81a574a28e92ba901df92e77067e1993d821da6f6d8c3d345aeda3e5c69fb782195f6051f8c970c7acc23b615f3d17f9b613a0ee650a054827232ebf541734e4724846be650e480a28a06a232dd8f3a102fca7f932c6'
        c = '0x588ef29f13450f2fd370a9c76a8c352bc52de8b05f1fd8f0a36633db8e52969df657d96231a8f692b2f3262fb1868be8d667291477a8c83f958bf01c30e574ee45e2734827a3ad6d304bc508ce21cca5ed07df1108a9c1e95ebffd0878a6c85fba7c9ac6efda539a680e503d66efb3cfe713eb0dcbe0fe3b8e06e7d09c1cda21b85b936ebd10a53a00b22f700a6f471c67a221a266b07af1198c701e10e0e58000e8c8573487760f582e0e2401f883ddcc71b9f23e6aa7f5f42844cc3e59df08690effefa71137449a8d2c47bd9fc2a75c28f54fa7d246c34439c8b925880cd0b0896f30d9864e1edb5a187a4540dab0201a58a44e83d78c88eaf0eca5074e75'
        
        check = p3.task_1(n, d, c)
        self.assertEqual(check, m)

    def test_6(self):
        # bits: 64
        # p: 10058387545691289073
        # q: 11190989773051024187
        # n: 112563312157215007278179473806931808651
        # e: 11411282194438160159
        # d: 29420992040262773431564818734255944127
        n = '0x54aee7c52b12c6d80b674a6358a0518b'
        d = '0x162246e69d364ff8af42043c824bb1bf'
        m = '0x74ac927da720cb81'
        c = '0x4f748497b781c90c091676b54feff621'
        
        check = p3.task_1(n, d, c)
        self.assertEqual(check, m)

    def test_7(self):
        # bits: 128
        # p: 186288099892414196526181580707866909611
        # q: 194006329994498354388185858187922946089
        # n: 36141070581775782000636942319004901596297540602933716219543756951014988961379
        # e: 309157963245961114558586835806091406589
        # d: 12400182155647263290116347386354800227103754908264318885390310155501205084549
        n = '0x4fe71efcf189d73d5f88b1613fdf8f24a295098cef038290f78a525fdcc5d663'
        d = '0x1b6a411f36b5da87e2d0b2de21d4c06627c1a3a8d2f6f622488736c0d9ee5985'
        m = '0x6de09e2ddb95b64d0bb220f950da43e9'
        c = '0xed0aa056b970f8032940980d10bdb95fdea2b3b46816bbd1e636bbec7267d80'
        
        check = p3.task_1(n, d, c)
        self.assertEqual(check, m)

    def test_8(self):
        # bits: 256
        # p: 111509988970486656886122364910412188887511594650482866355940093888877904538069
        # q: 112047236004066142596889059435966311353181540381742918097615380668687006124421
        # n: 12494386050986930995101902736308082721967616237230141277939867235228939861060359329662501271956646220910032418035809068405836983214415008083250391945083049
        # e: 98667281748972151580063557339376239211691244452292935536329708329842578818379
        # d: 1667688116845501372054367302582586261501498123735475188060953008810611551596079733997500401677229910756011425140931184649710142351357645022797601578568499
        n = '0xee8f496f94606aa20efc1a120b5661e7f1b262b45dcbb6fc2103782c03e9e85b429f13409be160b2cdb428a7d3077cab865b1f6af83ea5b688cfe439e5cc78a9'
        d = '0x1fd77d5de244940a4e20b219da6cd28f530274832c5fac95f25f7288d4ac9d2ee526cdc0eb12800ab84e63e7f49df2dfe0bd007fff1889a2f85d9c8062e64b33'
        m = '0xdd081f339110a86a12b03683a73bff06060bab13751f4809f6295aed7a41a8f8'
        c = '0x1cfe363d549cf3502afcdf6832b1a64b7b0f9fb605cf266cc725c574018196b87b478ebd6f422fafc3a63b254e3f1cbc7d39e3bac66556c4acd972e31508b310'
        
        check = p3.task_1(n, d, c)
        self.assertEqual(check, m)

    def test_9(self):
        # bits: 512
        # p: 11319069544467102389881129936377319880554300634082564949678625413822978310407265951366449697221300897379970508601964723396618271640021933657258203578368569
        # q: 9467765624623709587590939176670854417837208991509089052560231713365503804544039872714335612664118619511286360912723482085705462233438344393091601127514561
        # n: 107166297535830783603297543661877501445171374077735028160727085239109459575117559881376453077945588136148584482520077948876111013343911923062876730504971400784346317378827143616537163027047180776953857498429929314498895424978153010599167227826119371152730034374898310874933405376670384690970049233266172233209
        # e: 7037411598665370561208812552966912199245767107995279864695005038893391842781758938989735666803427425980750044183046505105415665373790895558477528818411991
        # d: 66242800190193222534977423704526198175827441257665544223582453424672835076837116335095644694369576149026522216702663668817739282692279712201070417389520905889141858842241697928056228613789755957336034552588256850855027093078090528543043422971278594331002817935313584641352973824303828707090163655388815970791
        n = '0x989c20a9780f10710f2ec6bda2e51e11f033b6721b456922ff76488b17302c63f6d3494bbbb3becd1bfec24bd2df46a0526b82c8076cbedd559c6125f273f1d8536d0a96f474e1c9b4a4e2ebe4402422df2231d96d888125561cfd2829ff0be7047dcc7537d9cdf579a13c01d49dd60a13e5b0c1c6fbefa6e7686678097c05f9'
        d = '0x5e55378a6014242a8becad866cdf60cff85aea27f8703e70a9aab9b17c751ad1ea2d27d408f61bb4715e53c614d5e4d0d1507f89b7900d914ae2179de9b059c7d7a6f53d5bbb57e321bf141344602c721ead8bf562a14a365b4b80d5695c68c4b619f40391c2d6925a5e4173eb29dd0533907095b0ab84077499047f84fc51e7'
        m = '0xeace6e5a4efe9b6ec972c3a5b00d7c95aba6fb60d5ff621976f4bfd5a4eca9a6878c1a0c75674b0dacf1f669aaee3164afaf14f102b7eccba198db2834a51ffb'
        c = '0x1ef7990b9f36a9548807b20dca7316f1c0a9c89476ecdb2213828493fb0a3b0fca2a936941e836ad5edc6797f2ba4c56bf0573ba590dbdb706bbe6ff970b94b494581cb7bd5213631caabf6e678adfb05ed906f72818c1022f2e2545acb85e29b4c10172302a8ddabde77a340999736f64c57ae22d370728d5921971db1d9143'
        
        check = p3.task_1(n, d, c)
        self.assertEqual(check, m)

    def test_10(self):
        # bits: 1024
        # p: 106413104897173235676905398715211465767218112907458846220725298647470725913214472096376924079708923664535050751017724865144682607669459653112342547280413449249607066059491389319313479821806228416774711330487148827040840368735837204663035744356764699960147606078393062859112208386500023171896038076485900201067
        # q: 108919918444219113550277724142861816284896302198117262852964213236597956101553272604530571582138060811071437904112840134300775193493298431447772262979082027993195723001361409551709734820593815302130216827820501104142790365453925531145893567533320697481284505339349263043690759925779649676033721289760258572013
        # n: 11590506706796242389278222663345120610336244850881455965407241173669556142229229684605201776076068268201715739508879693727654167100106295879814589852072104564079903482262844323221670692298643497578209482532096255186337642067568508892475593441195034140251944186726668979306172717013272933168323131215850153512733104654739621831016666762496348479261274085090298443846221378549364540184823082054099716807094035341319865019993620086553468747407061714886260176745257981233274245339358392343915121347516408082794857996029710363349027896000565199103309088478491784912300422427140878085014531894499291118784175355026998937871
        # e: 99728639909415806169966959157179962844950916914242008157571188759986033990907147843194688359996090876587935239643314079040191845643195384567184422483317613781954364827855133566153854897526040851109732054210916086052372998011709598735311953209495673737984532814691028132685934862691370626500658714938490128411
        # d: 3866714736578824796115277553700781876104707325424528382243500360211208449152606276187251581518761372544884076198137591593280729302589274413056115532173995590022267337651864056640894752258507463119708824465720417614172307980820409189895863705835638010119867446121644224297979986283031447355922811197094220013635515609451854874021017510765200326337295736912213052115290949062278321359298390579796232501042061134481532218337418472314283593452446571642181301966302779161034253248676007074040674652629105510203515626501505623653133667071361650405806188894121927109517321909047030626006092694054063577474566593789000513971
        n = '0x5bd082ff39f965af7f9de067664727dc7cc1363c5512e1f8f9be1970bdea38a99dcdfe0ba36cdab83b332c6aca9da75fed5c899f2822d0d4c58e3830b22eafa1f848fd45cca9a489a904dbd2a7a932565adc4cb96b39aaada44b8944fcd35739fb0dbecb1fee4da8aed655721185deda7b34d55907b603393ae31bcb18bb067e66a23eef83940b1d4a2dd47ad8df7fd7267d1c328b52396d1dcd7075eb9e1106ed8ce63058f6fe62848cdc286a72f8e8d3cb0a67d4d0df3e1c88269c5b74b13a69e8189233deac173c3544233661c6dd2c4822dc85636dbee13bde7881c2463c43db8bf84dfc2d6c9b65b3b6446fe57f700249baf7dcee979a5715dcc8d9c90f'
        d = '0x1ea15a16270e047380abfbf53b0839d56ab0b4f4a8032219aefd78b2211435f2104e3fd4a7d94f676fd72a0f4d5d7c2a25f9d7559e783da2fa3e437b957bca836489d3bfa262e00c42c1d432073dfa98b42c9add00090ab1643bded0b9a3e4b034bdb03cc15aaa780a61726b838e6bca87fd1b65fd2e480f1b9a28617284ce3d5224abf3ebccfffa6acb800a4f7409505cf8d013649789d993d00d8c9a2dd918675fabe6666e874e97c46e574a4a730ad60664b84f258892823cd5acb614673dc261e54f806e21f27dadc07d6562b8a3532eabba0bc6e53d0709bba195fbcc9a87d05c498106238ff0e92a2236d27a951f74d524efafeac1414569005a1979b3'
        m = '0xc4b07f76802b89584a9fbc06b172b51f78c11bd03fa864915c67af4eab90c17acb303579b3166cb84b50b94eeed88287e2aba06d6594bf393769ae0978e216a608feffd2a3a701909fb61d479b335b3a3e7fb00424bd5532ef3b57f9c246b2d96ff5124e6ab0034b5a383a14e2ddef8f7dfc7fffa78568e51ac7634d7c220e7f'
        c = '0x3393d520a74988b15f309bb5c45df6f54e765794976da54b5f30520f19b819d6e8b16e88292cde678070245c3bb620dde3ca13329f6a81f0aedabe42d3a8ade915b0c74ce8cc7421b6a7ab9723c52599b9ad9cd74f194829a4d748e16593261c98e07d4bcb07290688a085619d9a722a2e7f2b6b34113ed376dbd06a07b8ec6120115451c0e53bc3f579dc17fcf39188fe69dc296930641e41b487be797166f185ffc59366b25887026c96732913c17808b928260dc266b2d0335ec8bfcf892c4fddc1bdd981c9ef00f282c95df29929d466498c1988109246ce4508aed2bee5461870572e0f2a9f872094faeb97edbaeed6dd8fa2063346958dcad24743a5a4'
        
        check = p3.task_1(n, d, c)
        self.assertEqual(check, m)

class Test_P3_T2(unittest.TestCase):

    def test_1(self):
        pw = 'babyboo'
        hv = '6f4f7a3960ea271125aa000243b13218ff2812d4d21bbc432630ed21b0bd2a1d'

        check = p3.task_2(hv)
        self.assertEqual(check, pw)

    def test_2(self):
        pw = 'caroline'
        hv = '05c5f6ef21bb02be3db6d066c4e822e07ef75b2f85241333a7cba5dec74e2d33'

        check = p3.task_2(hv)
        self.assertEqual(check, pw)

    def test_3(self):
        pw = 'cecilia'
        hv = 'b983e26b1409ccf1698fa1cc5bc80caa873ada20c1f79fe46ef919aa44072fc8'
        
        check = p3.task_2(hv)
        self.assertEqual(check, pw)
        
    def test_4(self):
        pw = 'grace'
        hv = 'e010fd1ce1acc173e3b4835b7635f8d4600d774869102adb5cb7b5d7895649ba'

        check = p3.task_2(hv)
        self.assertEqual(check, pw)

    def test_5(self):
        pw = 'shorty'
        hv = '07672b212369f416dc3505dcba04f379ff39de0d0db31536e57dae76486b5000'

        check = p3.task_2(hv)
        self.assertEqual(check, pw)

    def test_6(self):
        pw = 'gemini'
        hv = '5d72436256ada53828b51895a94bb8489e9f1ac4fe937a8024ef1594e7045ff6'

        check = p3.task_2(hv)
        self.assertEqual(check, pw)

    def test_7(self):
        pw = 'sharon'
        hv = '56e1239485139d3d0564c10a8cb8e7dbb6c75b2d744d49073d07c4208f7b7941'

        check = p3.task_2(hv)
        self.assertEqual(check, pw)

    def test_8(self):
        pw = 'darling'
        hv = 'fb609bdcdece3f067149bd817b9e09729a94e2a0be8fe9cf9eef2d29f6fb89dd'

        check = p3.task_2(hv)
        self.assertEqual(check, pw)

    def test_9(self):
        pw = 'tekiero'
        hv = 'e0a44b841518805cd958795e01835d136731c1bd1341055eaaa8e1733798a28a'

        check = p3.task_2(hv)
        self.assertEqual(check, pw)

    def test_10(self):
        pw = 'hardcore'
        hv = '08775183b0ecf9d8b7e7911521679e9afb0b287508a2d116f2cc7c77fbc45088'

        check = p3.task_2(hv)
        self.assertEqual(check, pw)


class Test_P3_T3(unittest.TestCase):

    def test_1(self):
        uid1 = 'dennis'
        uid2 = 'genesis'
        amnt = 1390637740
        prev = 'a32f3c97acefd93600a6a85bacdc65b56a2e2b5cd22f166b8da512c7a1844de0'
        nonce = 70

        check = p3.task_3(uid1, uid2, amnt, prev)
        self.assertEqual(check, nonce)

    def test_2(self):
        uid1 = 'bryan'
        uid2 = 'horses'
        amnt = 15850331
        prev = '8a66dcd74a96b266574d16dcd9058e679223519ab7278b1b164d4e2670bd0c05'
        nonce = 121

        check = p3.task_3(uid1, uid2, amnt, prev)
        self.assertEqual(check, nonce)

    def test_3(self):
        uid1 = 'victoria'
        uid2 = 'qwertyuiop'
        amnt = 3519853248
        prev = 'fb594b57b408644cde89a21cbdb74f1a5bca961f6c94caf55466aae4054674bc'
        nonce = 47

        check = p3.task_3(uid1, uid2, amnt, prev)
        self.assertEqual(check, nonce)

    def test_4(self):
        uid1 = 'iloveme'
        uid2 = 'mahalko'
        amnt = 2041380331
        prev = '3bc1cfefa9f1d6aaba1cfeb7b7e4120b4292c86fee5a41e4b070307f88dcc8aa'
        nonce = 104

        check = p3.task_3(uid1, uid2, amnt, prev)
        self.assertEqual(check, nonce)

    def test_5(self):
        uid1 = 'tatiana'
        uid2 = 'nathan'
        amnt = 412962854
        prev = 'a6c6921d867db5f6c4fa28c56dcad22a48d9f643ab47f3306019e1b7983d9795'
        nonce = 316

        check = p3.task_3(uid1, uid2, amnt, prev)
        self.assertEqual(check, nonce)

    def test_6(self):
        uid1 = 'victor'
        uid2 = '123654'
        amnt = 1168911535
        prev = 'e65893c54d9cc4c870fca36cd6f13b02c0aabb079908c02e5a1a77c06a9567ba'
        nonce = 404

        check = p3.task_3(uid1, uid2, amnt, prev)
        self.assertEqual(check, nonce)

    def test_7(self):
        uid1 = '0'
        uid2 = 'gorgeous'
        amnt = 1199897669
        prev = '5e7a6076941982b7de70f0edecb0fc4e314916480e14e793f8b5f98eb55964fe'
        nonce = 8

        check = p3.task_3(uid1, uid2, amnt, prev)
        self.assertEqual(check, nonce)

    def test_8(self):
        uid1 = 'hector'
        uid2 = '121212'
        amnt = 3557567912
        prev = 'f1dc6aa9f3be86efadc61d3a5d2f170b6904fd52d1d589283769ddc0869fa851'
        nonce = 119

        check = p3.task_3(uid1, uid2, amnt, prev)
        self.assertEqual(check, nonce)
    
    def test_9(self):
        uid1 = 'flores'
        uid2 = 'jayson'
        amnt = 4141644379
        prev = 'ebaf340dcef137752269b1e804bed9cbc25c5024152d601f8b667c58c3a3eaca'
        nonce = 341

        check = p3.task_3(uid1, uid2, amnt, prev)
        self.assertEqual(check, nonce)

    def test_10(self):
        uid1 = 'snoopy'
        uid2 = '1234567'
        amnt = 2454329277
        prev = 'b6651f5f4e21f20ac559d089dfd43864e670693733b3e6ab8d8883ac71684a27'
        nonce = 290

        check = p3.task_3(uid1, uid2, amnt, prev)
        self.assertEqual(check, nonce)


class Test_P3_T4(unittest.TestCase):

    def test_1(self):
        # p: 3738159991
        # q: 2185696619
        # n: 8170483653609770429
        # e: 9016087
        # d: 4129498032180366823
        n = '0x71636398088bcdbd'
        e = '0x899317'
        d = '0x394eec94ccc90de7'

        check = p3.task_4(n, e)
        self.assertEqual(check, d)

    def test_2(self):
        # p: 3669056849
        # q: 2864756827
        # n: 10510955656823858123
        # e: 12118049
        # d: 7764554140218986561
        n = '0x91de6a7afede63cb'
        e = '0xb8e821'
        d = '0x6bc13cda270a9041'
        
        check = p3.task_4(n, e)
        self.assertEqual(check, d)

    def test_3(self):
        # p: 2211824603
        # q: 4153102867
        # n: 9185935100020436801
        # e: 8943607
        # d: 7296634706532555115
        n = '0x7f7aff4de682af41'
        e = '0x8877f7'
        d = '0x6542da9b3aa8d96b'
        
        check = p3.task_4(n, e)
        self.assertEqual(check, d)

    def test_4(self):
        # p: 3183585787
        # q: 3267845491
        # n: 10403466459259636417
        # e: 16244101
        # d: 7602020697240009361
        n = '0x9060899ff0dc8ac1'
        e = '0xf7dd85'
        d = '0x697fcd8c02287a91'
        
        check = p3.task_4(n, e)
        self.assertEqual(check, d)

    def test_5(self):
        # p: 2967683639
        # q: 3348667241
        # n: 9937784983570969999
        # e: 10513117
        # d: 9491355302769599573
        n = '0x89ea1aca37f5758f'
        e = '0xa06add'
        d = '0x83b8115c4a9a2455'
        
        check = p3.task_4(n, e)
        self.assertEqual(check, d)

    def test_6(self):
        # p: 3212678879
        # q: 2993429501
        # n: 9616927733638209379
        # e: 9856151
        # d: 2851384167910504351
        n = '0x857630d2321b9f63'
        e = '0x966497'
        d = '0x279226cb1e7a779f'

        check = p3.task_4(n, e)
        self.assertEqual(check, d)

    def test_7(self):
        # p: 2421340907
        # q: 3080287883
        # n: 7458427056444329881
        # e: 16507397
        # d: 4423155194501170381
        n = '0x6781a7e43286cf99'
        e = '0xfbe205'
        d = '0x3d623436eaaa84cd'

        check = p3.task_4(n, e)
        self.assertEqual(check, d)

    def test_8(self):
        # p: 3291085381
        # q: 2601940673
        # n: 8563208911139601413
        # e: 16671173
        # d: 2021442344019618317
        n = '0x76d6a12285ef7c05'
        e = '0xfe61c5'
        d = '0x1c0d9b1a1138ea0d'

        check = p3.task_4(n, e)
        self.assertEqual(check, d)

    def test_9(self):
        # p: 3376313977
        # q: 2665389361
        # n: 8999191353691398697
        # e: 14910587
        # d: 4284462811766897843
        n = '0x7ce38cdb3e8ae229'
        e = '0xe3847b'
        d = '0x3b75783a2cbcbcb3'

        check = p3.task_4(n, e)
        self.assertEqual(check, d)

    def test_10(self):
        # p: 2252962771
        # q: 3781160599
        # n: 8518814060719059829
        # e: 11925503
        # d: 8136945836654605667
        n = '0x7638e840ecc33375'
        e = '0xb5f7ff'
        d = '0x70ec3d2086643563'

        check = p3.task_4(n, e)
        self.assertEqual(check, d)


class Test_P3_T5(unittest.TestCase):

    def setUp(self):
        with open("custom_test_t5_keys.json", "r") as f:
            rkeys = json.load(f)
        self.keylist = [ k["n"] for k in rkeys["keys"] ]

    def test_1(self):
        # shared:
        # -------
        # p: 144597770655054199457410778119380401805259481999143349517933877115114730060076196043170688414965513343445619380602580755147235067437902240740292235536255069453770910810979425790583530890778721371366486921357755394909919592756638456792715288786368620714842113673793519082406612994041226125788776095092568895163
        # q: 145740328395170506814765450704524256177229927695932695313414479411674748358880464359077387722454737733809225763367110623167687779239195035504701399118044568914779744478394273465584013869810227900208259007431785081511642366306516577117072678630224302737138801564894013794312536396274923210211178078648928982167
        # n: 21073726580477148200743456069498331966104384239416323598805476337752682960812482305127035781950212305581209099169464057598278239730673029354718552759311880176010951354447649129942527759024485073263199042480139844199564028297059984940116244611816939096740196770869448710198177345211334296754695510869594845729755489639145992536539245983678228051454688730599806459663878968701292197769482071328670895481996938634121640853025170096346740348752095716070719268845388560229943276015722332825379118307073610235630077140041234365367209380526215988776933113704427171392873777390627506392569415931158546014187373497449319558221
        # e: 16231469
        # d: 2638217747953364712601300266076824132703920171651857278842125060025981371082206856553465292728300969452481854159838377935147025545535236916465033122003060197923987614889280458498814585838281061352610331542038730175994624918057548725754597498915582398340016401568770743443003189440644877697409233459718934869037722917864011061684433492432512596654671525742220046665298102373136055508209222677815913745902440644315941998196964035892262226745862006063709433834142784405102186844448401126895848110336382667122480282380037321910899049911729078203908519406297716932697918480362834517552539158055035162154681567298897775717
        # given:
        # -------
        # p: 144597770655054199457410778119380401805259481999143349517933877115114730060076196043170688414965513343445619380602580755147235067437902240740292235536255069453770910810979425790583530890778721371366486921357755394909919592756638456792715288786368620714842113673793519082406612994041226125788776095092568895163
        # q: 169503754253657958887051482869398357784305651720222988599097715670357943935816571582540031577977303946531329713880995492546414180377798510326198604841344311518645216602639179690473681078718640118810130907705952802170248361568781861471369132529252750419497549760779732054743340150658980245493526746113185841077
        # n: 24509864982741101245474927504162566970768582208788255577334566405141746508150738501905503989234101623715530037154946143951855690079177018303264380208406947936006291078466259280928611286562730209010778058755085347111041877503151511537681232028818950375975604091825299045253561402234291540687014913716259928632169655145689583823461675833251876622714996063874244472383544069456092294189437401538444184201163020930246250261871703846666551081158245758402822254692229394032758380763008848957535894776409249725556116774009184848045410693146364470306473575490874626660465729361495055360157760457263972915094672169592792010551
        # e: 16231469
        # d: 10494568458788700417545986502070275945497736256417783903904793693270502239759241791306914471725607637696679015013053130823819310359321518023151038851522141500994340971967068617801134279664569308417114306604702824057289217841428606255957058815501799480297225206860140731788530865984712030089395928275966860560506175338786967260102359380713427737473114683380604973253569691547914906377559846729085346580369736074355236044278285301354974228021722534547064994790164705078676887633450470470579255157857175891215455763980880634645326056251618651808690043698006559818093684158261486529301842082717874247849602816400382771485
        n = 24509864982741101245474927504162566970768582208788255577334566405141746508150738501905503989234101623715530037154946143951855690079177018303264380208406947936006291078466259280928611286562730209010778058755085347111041877503151511537681232028818950375975604091825299045253561402234291540687014913716259928632169655145689583823461675833251876622714996063874244472383544069456092294189437401538444184201163020930246250261871703846666551081158245758402822254692229394032758380763008848957535894776409249725556116774009184848045410693146364470306473575490874626660465729361495055360157760457263972915094672169592792010551
        e = 16231469
        d = 10494568458788700417545986502070275945497736256417783903904793693270502239759241791306914471725607637696679015013053130823819310359321518023151038851522141500994340971967068617801134279664569308417114306604702824057289217841428606255957058815501799480297225206860140731788530865984712030089395928275966860560506175338786967260102359380713427737473114683380604973253569691547914906377559846729085346580369736074355236044278285301354974228021722534547064994790164705078676887633450470470579255157857175891215455763980880634645326056251618651808690043698006559818093684158261486529301842082717874247849602816400382771485

        check = p3.task_5(n, e, self.keylist)
        self.assertEqual(check, d)

    def test_2(self):
        # shared:
        # -------
        # p: 176060857710349291021778205182023328423344011671530178830082231334715850437634508810017247057291477387156346593046810837323301517216128276776714404205899777820175981546913726678925587628846892095730534533498351991184942071060705669398845611566504987494140538907468323732171846001228675845743760151933361021813
        # q: 108548626134363855603839383875773442298956437456261594454289259885117457976835019478776834575750245847244526599267161462080677665679398027110100305684260326816673997279726039530792545574801874169490151516834137261845257550262051830843537823861713617576471066441675024936706725806305251529518972362100516182659
        # n: 19111164220496137183369644231915252819715725296106712397753336104749388539258985587838334471403092507241477479996139825578851485253693166750849959289315722057190953582551353935886036181252486549042634240826377614722870026809716480585762851709988554769775964242351409380290979447338731400990217050377825157087435193720668173457264698156839695255192772789270740466642411082165376545453206499325791607056990021343646329694343918937343038618794954288136388538592460268734594762338969398310571249224497880787507235201927039346458635378527557712394597032774803318488980957629083557219413936845236941307245440770346391340767
        # e: 16231469
        # d: 1689100938631029080682983226622442057855138297951667098346487904195972746372669771265253752304107869996302550966906461249935952067719157866935401154822338947104250647013183716527017315258532571263779479378971116564816684023535831371832494065717276165478247943092131502442861749017321475147415833232116717407393620434933115653902808513285605562709331642261336423170388535170575882238829798929173391207555820686535019918158031845274620897273671341440794722341452229672629335043860503646798842880257469422943447023472753306911471322204394951088554174828504445968463568962274334139656107321685620583177863539269433228269
        # given:
        # -------
        # p: 176060857710349291021778205182023328423344011671530178830082231334715850437634508810017247057291477387156346593046810837323301517216128276776714404205899777820175981546913726678925587628846892095730534533498351991184942071060705669398845611566504987494140538907468323732171846001228675845743760151933361021813
        # q: 135883626514602430979637893225004059420801798627082874742618130108003654664955436513246663718749653038399788889487337765321210164593658153590430206665024815037214312676430135506284777280438350380968158712706443201134185109955909694472444035524577419856359126423708974562148340717525273143021621484580417278207
        # n: 23923787832953664768674336523243358631016024892508000949806029445912883832434699765844529223637678764281631541351861506799668101210674126239610842453199590342980482827656946190518242498598314509178432237433064936924983574134001042086147101145312709672074192987387989515427441459735010164384508563241065269261576173821187405513962886560643977351724352765323023309656784435480365227294076047385675862818725755768220437521228981395663950303767184677126236343195457213178415307241448431433458954291420288778687963278183486426666892300361980130046920952887270931599838690224532590713627120812547855597339623614205816529291
        # e: 16231469
        # d: 8802511562172317406317715909310921451587109330343795024863952157930980655529957196787070173282984577144575666843504429243711178167952046612445019765043046926037854337416931847197898655174947573035099371798216494294709908968204251355744319245179771179612938268721366239864968274942480386325938262914183336284144137106423690946349950076454105112000971676513733475399292514752409400366869916808474992917352409990784594417430570073240830967112786755412658038651463916429650712747980490531912343978549673341016325907625687098755768288211290435097626569458291710805654806915267266573171517033290342151751040222401086808405
        n = 23923787832953664768674336523243358631016024892508000949806029445912883832434699765844529223637678764281631541351861506799668101210674126239610842453199590342980482827656946190518242498598314509178432237433064936924983574134001042086147101145312709672074192987387989515427441459735010164384508563241065269261576173821187405513962886560643977351724352765323023309656784435480365227294076047385675862818725755768220437521228981395663950303767184677126236343195457213178415307241448431433458954291420288778687963278183486426666892300361980130046920952887270931599838690224532590713627120812547855597339623614205816529291
        e = 16231469
        d = 8802511562172317406317715909310921451587109330343795024863952157930980655529957196787070173282984577144575666843504429243711178167952046612445019765043046926037854337416931847197898655174947573035099371798216494294709908968204251355744319245179771179612938268721366239864968274942480386325938262914183336284144137106423690946349950076454105112000971676513733475399292514752409400366869916808474992917352409990784594417430570073240830967112786755412658038651463916429650712747980490531912343978549673341016325907625687098755768288211290435097626569458291710805654806915267266573171517033290342151751040222401086808405
        
        check = p3.task_5(n, e, self.keylist)
        self.assertEqual(check, d)

    def test_3(self):
        # shared:
        # -------
        # p: 173222662656020664080830099043123645320118465572290406958703040451096509428117481202689912896908781784082859311517257746101383051924705645572353367542377193050543195670258435484445807036541456621749766427768353630714980100818744979744472486837022932406246591823538743588791769721050667526281467631681977720101
        # q: 150294538126395363466387507260811404564287675985291450527983555590202189871916026676419886200775407684960046041025752363722118489075464098276473598584794759123429549907186428304694263181308245201959975593707049545303155661397653473790060367064950016020471057090973147001696696831933467899094236554830297996031
        # n: 26034420076911020033504716201400014070969961265945140863999107196375735173593513084197612103522021037823530348426782778445135548049497138198828494941973452728584882375758603243079067771502132685318892176467981734350194888191498742399597142711178868432475676869533250587456199117423662142695179559280930989153316078427816518959434927219438598030217934100534683915265972209104986303969752167906838539850109691843462596896693428413945312547288332804571459751197063105130026794034787911367499517738588721931395950046438039207550764313929293862082816037660737700746569350217215196301516345037091941885232478852650526919131
        # e: 16231469
        # d: 1955870920888685050630723533887499188046106697876047458557818476284539101406461693856205767498178457892716239405407582927125153230590857474956311954616479257990538010004280828755936330243133700340825320727224262613920249535299834720334625990449868408960002178925050507264656773947983714664770736497252302820776099321535153872411432623076947164764414586380581264541040398050946859196657203420286403620624598690105836414778231454876171816672222040164007728879922146339144954981179900783507325939550627811230994965023049544428001810241129345904136621607721339663779210799541972493086745033994420614857497460791152731629
        # given:
        # -------
        # p: 173222662656020664080830099043123645320118465572290406958703040451096509428117481202689912896908781784082859311517257746101383051924705645572353367542377193050543195670258435484445807036541456621749766427768353630714980100818744979744472486837022932406246591823538743588791769721050667526281467631681977720101
        # q: 102405911723518488573962884168611110919528189169441746569687740053684973573769633073573588771259097405313370705421975366916914501702507761482831093547340987696420085695500751443061607762959726261511074296820008012796141126549255225147987555565906129275236560075532323438421689733591993833821954791528842632357
        # n: 17739024700465274811663897962665394135517451183515465925220664140067602716358596226354546763494040608099848880810761555137595350416509999636820802140147987986039201684011868314259068288696165017220919988007130067634506169575642189892808507275216071967553823978180129744442426540441334674086881613319103927257066453641985441247319540244744535913248415883464230763983304634609026158622090365140349041291386466892710844052160605596741161736364665378755473322081039801595928355220284656014983586359937889474848866350462554248090228163006227374754921681066319949368488712782102200476358995319325934569261582865038191908057
        # e: 16231469
        # d: 16831017465745203022442427436288458316365572869771220736488187948656106502377016611551696101426338128500887231428760879137750868013835715005019688189825897339880138057229571488862734518968956608486761104246464662341032540914537852568162104649271339470851127560866873686295591792036228611251882222961395434764704490238689943366817547564772642694870242775818463815729287934075443176119924522614170708763451370613633950262581734930622999686333239599045203360272561682640898130439773918212035464229555365333778581809605849044080146231193936596913794600093616846586605362958612980852181695006051596020045026811008876114229
        n = 17739024700465274811663897962665394135517451183515465925220664140067602716358596226354546763494040608099848880810761555137595350416509999636820802140147987986039201684011868314259068288696165017220919988007130067634506169575642189892808507275216071967553823978180129744442426540441334674086881613319103927257066453641985441247319540244744535913248415883464230763983304634609026158622090365140349041291386466892710844052160605596741161736364665378755473322081039801595928355220284656014983586359937889474848866350462554248090228163006227374754921681066319949368488712782102200476358995319325934569261582865038191908057
        e = 16231469
        d = 16831017465745203022442427436288458316365572869771220736488187948656106502377016611551696101426338128500887231428760879137750868013835715005019688189825897339880138057229571488862734518968956608486761104246464662341032540914537852568162104649271339470851127560866873686295591792036228611251882222961395434764704490238689943366817547564772642694870242775818463815729287934075443176119924522614170708763451370613633950262581734930622999686333239599045203360272561682640898130439773918212035464229555365333778581809605849044080146231193936596913794600093616846586605362958612980852181695006051596020045026811008876114229
        
        check = p3.task_5(n, e, self.keylist)
        self.assertEqual(check, d)


    def test_4(self):
        # shared:
        # -------
        # p: 117980652082542036964460789864153600093064701135873037325260906644440133495888151042241171718213219723804445518519352378512093955426412876670208066361889273394647626377404628077825485804897922133673914104944908521204962015091037720607371794696513141648568162700415486685350440451264908250626705179046511872459
        # q: 97169294301776717903777105822366915316429333610627822286682191324621995477800539918203682867651678636385059760784427372650730005362135444388207091589422750407589642045248140556651039878233104285168070152181630947617968363874447085607574142520801670162465924947701316040279624486843238264309210327937023036333
        # n: 11464096704124053418775519253605232197716900688653515808637230731573177382076502794922052092822642657344347460981109464452882211655456847417068888098454878562626565685029594095145494879310210103746093525173750022142547966082996585988747308767930412664371333897256810620234128562805739972505716068723778524920558526947060094201179297115673266438232810307973508959351019192456985689161413224100446561014228269630577684380422677540925585665961196051848903530189230186887796661675608089679937116058983253202436440366065929292543767077445163183359212425725364183963202243913742927612667780542180692474208648657065419052847
        # e: 16231469
        # d: 11194125769263648975114915539672820390133550691045152004401293341210924911314457760561439983720968982170483282135808506136478117626692712149961949427785865528322657896961858080781402583217191326465626609765853852380356670149917544773700612590514495903761642051278264498828378222665959448552485932597904250719590066743830796859910623562241380190689394100873906951036135854927291715114269035191978572338437734430554279458921843020889954920313958249513739762181992257627485257331085502056119834427966340465262186780228298829626018238191815720769711155389350856080574599090806232469986836883558396199018350121253492252149
        # given:
        # -------
        # p: 97169294301776717903777105822366915316429333610627822286682191324621995477800539918203682867651678636385059760784427372650730005362135444388207091589422750407589642045248140556651039878233104285168070152181630947617968363874447085607574142520801670162465924947701316040279624486843238264309210327937023036333
        # q: 171460118778221727172746323403082080624761182933800605612865010278817994829215818700699809208560897582213056279237332397741231290047688090499322867088754510371352201104608208418111098341117194925880525813810563569970514299594815397076198568650910120050362534452333357462252791751293004665379020958331789114171
        # n: 16660658742578619701119910123774739160480790188198124231922962589341939954036875618817848805974816456665277010536831583496452331190444179346264998354536425316552892574811584873956950644642550747347617968871662497537973709945225295059003598020631810847970471897225673121487100648670642080407144725794583747598742211585938487019548328930566228340300834055753395286767848993643689282743931897151251585575542833615807490077329772250673751172127027129299180294747453652949213215507573791622957497865621286732390270969647596190502275405953328662280570617679914389039398971697961092870655839515462588286751754113746818174943
        # e: 16231469
        # d: 12418069806313887219125839152449361399059580028938432931435342799559556585889435859383076881376414985061861480382361007014980695372856174516919048280405097883919892984892089643748788818461006669213983403332133328238126966474534510608656288440218392821389895143428023442581065178322984767380171623502204935785597738232034064596001428589474370996371936353760637746397965607919478320956661614216000708193878159690642376676792886211629748508676788554641011517172223272460144941253296984306103344718980491885426097598579874573767710474691104046106051875044467906845082735759063401153628700645511372153756133477059608289349
        n = 16660658742578619701119910123774739160480790188198124231922962589341939954036875618817848805974816456665277010536831583496452331190444179346264998354536425316552892574811584873956950644642550747347617968871662497537973709945225295059003598020631810847970471897225673121487100648670642080407144725794583747598742211585938487019548328930566228340300834055753395286767848993643689282743931897151251585575542833615807490077329772250673751172127027129299180294747453652949213215507573791622957497865621286732390270969647596190502275405953328662280570617679914389039398971697961092870655839515462588286751754113746818174943
        e = 16231469
        d = 12418069806313887219125839152449361399059580028938432931435342799559556585889435859383076881376414985061861480382361007014980695372856174516919048280405097883919892984892089643748788818461006669213983403332133328238126966474534510608656288440218392821389895143428023442581065178322984767380171623502204935785597738232034064596001428589474370996371936353760637746397965607919478320956661614216000708193878159690642376676792886211629748508676788554641011517172223272460144941253296984306103344718980491885426097598579874573767710474691104046106051875044467906845082735759063401153628700645511372153756133477059608289349
        
        check = p3.task_5(n, e, self.keylist)
        self.assertEqual(check, d)


    def test_5(self):
        # shared:
        # -------
        # p: 131739721399701287053231017192041790264890298304301248144447283798478197351127247210108847218623026995241069750616533274012717899305854440257859329668302567668528181650250201591635574113487313779348962010706745052891690439984574827947730420980482815746291753209395924845907368043886699228543418972954867444737
        # q: 121219196082513967202367649260133771180976217719147765515831227384107605111991356053044245719112470255690433510155532732264065779461832961672926315440908320801614273235061152031200745973314126897003093403243023527913799376384228458846218113726536983728007901126363416134832988207395255678923392114366649025133
        # n: 15969383120206151707581876649891804115543147313220390951954401311112728858478730059883140673510715562462717882779282000762713041278627909592744696819698538502451389756759283054174635836234435291598758678073281806965873941480023867750146696441320181652826223120679245707869346767469928120045291771555069338531682059004335477109671899484851757628747214475441918277358847827421325793859498454596074726299176768450380524637192673234474312693821576344777955629961090009071365310434677189670991985315027101302589377491202317850780412991676527844736329083916409077208279094597695445305257230503782077068154845038059801575021
        # e: 16231469
        # d: 551781291082591323387001937698637735423015138660868243060517231565456553242509074846810289685408584023103719646341571392075337970431501975099490842773951589846817319924130467196415816614393434484233868218248462217025448757461949125947196941451244290804861870255390077451666317634437898200208576394633808105350852852900160966281370583407377755388565636635622816791561781599150774372595079760310158623937897316360299292792759798638103401498396596946313255614410090076297347001540013870077901071036909526096317037098742447459618472540597423307941559699676366591125660119745382191904446246063705694921007759484382319525
        # given:
        # -------
        # p: 131739721399701287053231017192041790264890298304301248144447283798478197351127247210108847218623026995241069750616533274012717899305854440257859329668302567668528181650250201591635574113487313779348962010706745052891690439984574827947730420980482815746291753209395924845907368043886699228543418972954867444737
        # q: 140953067380192873581903175472172757792951351646411848391127688041780958826176580280357642602696941801148124477365505717011098725026124376716725357395253342784120282831684003089160150109859479723416704313869268055403750528973373149939639887947762805123725704991135006279523342348037935952955365229255142594111
        # n: 18569117827099932537832080017619153240995359687724294775143201903222068982631906967449062242437048465136247349432292795958139358874550298103037437811545394386099778702071505666313268720541816883241293412517839091276248602100397903768689652837126459690842317718302019487052377630095758682374910772623237677791370288421983479628785610979269460509738295471453297057190787055692189322040276024575595470600701388161444767855741087642321329806896651397994593998395969902499771117377979112289281907072066383341815680713255538722608817587126569519504229341895882460880185520137491785111509911705667600386649080547340114143807
        # e: 16231469
        # d: 10393732198028739086255985258147297232406020458585069670110521337982155698672812582378759369509762517125881806361055424607506847574854744176147794005169099788883721303811916139106958370497491963536389836829495257021703920849535711472700461411091263278001358848551932058350959495611163965689964196693754933277666624516022160715345654973522419690078968520541910808759316976492875958279605790940585550257367002630621743274803937384559402114480535044827215891304452944560712419824115389554247326898193926352259004990559411293924226005337651390426406195936119324235124968597378464185735481841829357417016405516161347230629
        n = 18569117827099932537832080017619153240995359687724294775143201903222068982631906967449062242437048465136247349432292795958139358874550298103037437811545394386099778702071505666313268720541816883241293412517839091276248602100397903768689652837126459690842317718302019487052377630095758682374910772623237677791370288421983479628785610979269460509738295471453297057190787055692189322040276024575595470600701388161444767855741087642321329806896651397994593998395969902499771117377979112289281907072066383341815680713255538722608817587126569519504229341895882460880185520137491785111509911705667600386649080547340114143807
        e = 16231469
        d = 10393732198028739086255985258147297232406020458585069670110521337982155698672812582378759369509762517125881806361055424607506847574854744176147794005169099788883721303811916139106958370497491963536389836829495257021703920849535711472700461411091263278001358848551932058350959495611163965689964196693754933277666624516022160715345654973522419690078968520541910808759316976492875958279605790940585550257367002630621743274803937384559402114480535044827215891304452944560712419824115389554247326898193926352259004990559411293924226005337651390426406195936119324235124968597378464185735481841829357417016405516161347230629
        
        check = p3.task_5(n, e, self.keylist)
        self.assertEqual(check, d)

    def test_6(self):
        # shared:
        # -------
        # p: 92697718989181601081877812066313075675532659264718868854273796476007317383349243585893604919120913281383270203116587992058759557801670709608632730277964594349202799551885773317005388996995771724942534571283922421710201319700289726180642287655815536337259956716383713483349970842005938428617262766190533113601
        # q: 162273237933667786614979272280467220666000077304631015656920005708776890259501513460512594475458923280150699147800560684132779203730643195409747321272632879911357424550862093938287106509296311564021798780540594394961031765859330064590933966104206059855604483308801153162131419692862724682605185510478121182603
        # n: 15042359009439740501285533802556491475874551867764205195553268810459551466566757055071561543634113688392381821389467898286126186744677781268121466609957184111835081143406672254454857987468888288382277106326954180674381483533724296810611661778742628994628716113429226363838710380085176710832083297781882149120402716294300851486783432762037547062641068338906218302569111665254593795347194328167366749610938510990702205552692731819963520346217488260929708872695920511482099032811804164761274155516107741448725662076958711715058141734265022841708815867083105493394177070783879831196196174934210311240325899007941863883403
        # e: 16231469
        # d: 14145205667637814418930234239074216832155256902851666153000802662730296657501407100034753299735052489755538376143705623401120810946179986741738462048449677240344852234191968961976578160093993473816362922747491358085608330574468014159261000057071319280064606129127011642364837885088539169327857265842511918389501128668256009998182391486931149670242570171253787671827062185288985014968056134766964940595926216505036870698579433992002421029161055406515898023279680842178366563442641349718334978767819491117988782534505634994655397458733205565106904891220720203520890758671264500363371749447138106559887892117125187550629
        # given:
        # -------
        # p: 92697718989181601081877812066313075675532659264718868854273796476007317383349243585893604919120913281383270203116587992058759557801670709608632730277964594349202799551885773317005388996995771724942534571283922421710201319700289726180642287655815536337259956716383713483349970842005938428617262766190533113601
        # q: 111477942358928130078729138914064885497076742058029486903728049630697257187988067823325615954177128404806625163432973908811494452529486600954050449504631925558243032147181344651221246886550967350193546814902302899334076669250899242897457214093480978951585850389252477500396917149223577364401293157748042339739
        # n: 10333750974280104092223165886655957849774413009067986590976261878120114782039363061214536294021090717974948015330749422225651324020259700891646711823069449030944823212399702825692228200853489698366531358625671960570701559969682067001579481657410093897031215681050689367847373174942290442615792222537518048451170752576549809659331449020310429651111749510250266919450137440668370420936685378716029002596948902351339344750123560789455774556981179376474036053489042437201266527214540050348802137319345622611193606891715975647735824908889585528106546266595584771325766904579971499099820365261006298580918622526848723690139
        # e: 16231469
        # d: 8337055614830950326783725403839155846329133273722988770886445106200866017434358629620851338341619937364520423242986435973380839782646480009462034546965584309307864880800076520457807918836861194752353089289158175771335170989988659682243649490621985633064384989496832358063668505234022940969029587037376395093486543307871412212892249562648687241475882855957704643090777448641959722272436487120971190922086807693905773492292708265271108344459637557006524738333612013397989319251545706047018965030712301472404188474272984955033648865949245251957664732401995908436492199116363738788233079361141506248479568114212472581029
        n = 10333750974280104092223165886655957849774413009067986590976261878120114782039363061214536294021090717974948015330749422225651324020259700891646711823069449030944823212399702825692228200853489698366531358625671960570701559969682067001579481657410093897031215681050689367847373174942290442615792222537518048451170752576549809659331449020310429651111749510250266919450137440668370420936685378716029002596948902351339344750123560789455774556981179376474036053489042437201266527214540050348802137319345622611193606891715975647735824908889585528106546266595584771325766904579971499099820365261006298580918622526848723690139
        e = 16231469
        d = 8337055614830950326783725403839155846329133273722988770886445106200866017434358629620851338341619937364520423242986435973380839782646480009462034546965584309307864880800076520457807918836861194752353089289158175771335170989988659682243649490621985633064384989496832358063668505234022940969029587037376395093486543307871412212892249562648687241475882855957704643090777448641959722272436487120971190922086807693905773492292708265271108344459637557006524738333612013397989319251545706047018965030712301472404188474272984955033648865949245251957664732401995908436492199116363738788233079361141506248479568114212472581029

        check = p3.task_5(n, e, self.keylist)
        self.assertEqual(check, d)

    def test_7(self):
        # shared:
        # -------
        # p: 175089780486417151837008557294183247589523357270555936133711127008832682561853072999155790211678988876404494571612196337082053726833698182032925073909450486057315587602296674526910144305807583763641211536789544129391057104084678294882537492161658747202883916433035916636851093948735659979062221691518920231181
        # q: 104745494742790061094747172874084997939821531827411383427370184507760761697944199587485558284937449095711171783854302688628379839696602936762199134193440452439126023877521212575759307482791677685704933830967716948009996909234052113084737851347979834021472892541421093896342315396448971140588980678797290659247
        # n: 18339865681456273603812136400696535889962208855736804583600531257182094777701723230309327932461878765925562299102258497836037369474306865315297850806664200709754872376149310925900919034106179397360413927154482064048224509911144395715113377322912948380427930439109324260119734004621641161871223331763588711070098337758136273815206014257881934643421368611551509858541309125999563433525008440644700234791248922345357770099069278028418173162475007469467910678859271110047326960357734785964085953699184291416668496651252030854629997109874014057826431487968542082095389549198228841185233413339670553192485500609905135380707
        # e: 16231469
        # d: 5835828379706538382676060079567681583505155417456924378659882300521520586578493188678847625573910414938759807187835597409747138882304696817789282206885384815091727293267647680723208481257545255840400559156797057839829782091925092567263837339448500055027581883012412790416408853276831519147161104719216538607793568688917420030490436772837293029205505454173051626148411527334592003825753499119802767661576242644238560241351849949386483586178423181392968375693188236401018269654088160146539992711906248724254861334338055956684743283609264911008122663927195442510059965482221305414448256144359342338877512165023714427869
        # given:
        # -------
        # p: 104745494742790061094747172874084997939821531827411383427370184507760761697944199587485558284937449095711171783854302688628379839696602936762199134193440452439126023877521212575759307482791677685704933830967716948009996909234052113084737851347979834021472892541421093896342315396448971140588980678797290659247
        # q: 177913985483436361364453252744973950217360050915285047362227332839722504722254485147175764035787696332686170488670289971187081946148460211994359662212202687635514219750924514845316421768357400766014302164447141784535166147213278511663817059657905165725526991818598094023983642053548192120488387516771974423143
        # n: 18635688431124110635533826485516020986743320701640069382628873376323136334966598529517052995345878124304550827675134986436862017117569473186360459079852605631502119691894054470899773489256258499098577605668482933753661254670325467862619416648997311855865286297494202583242707100736594854855114819278630635786051908735482128204916188847525018774093618599647345894988446248093864552923893675569799088027940038245494118486680147153521040956135907468046671552743553559243726360163261001870720401135631954348467137455724900233473118970792456495765920568118585268984397054624317704471969228421646299016555788155505003753321
        # e: 16231469
        # d: 8831815371040969167348693248998091884512313756393976693025060715076896666058018360990231020671979288892671730929939702061581444799195037347760567615290390674634414730854185265575140222164503174961698800092751255967840472010099866002000457519001931537796414551413743352444529160365589146049638448119040353673113224988716289090931213918442329681846534132971604583679296172517228115688888164143068705929578598612378866954109705953747700874132700093830455948125739521765408329006293997820771288218351834630249833081922659374337080422425824511407243715098408502975557981173214962084362768546195822246751911179794590099881
        n = 18635688431124110635533826485516020986743320701640069382628873376323136334966598529517052995345878124304550827675134986436862017117569473186360459079852605631502119691894054470899773489256258499098577605668482933753661254670325467862619416648997311855865286297494202583242707100736594854855114819278630635786051908735482128204916188847525018774093618599647345894988446248093864552923893675569799088027940038245494118486680147153521040956135907468046671552743553559243726360163261001870720401135631954348467137455724900233473118970792456495765920568118585268984397054624317704471969228421646299016555788155505003753321
        e = 16231469
        d = 8831815371040969167348693248998091884512313756393976693025060715076896666058018360990231020671979288892671730929939702061581444799195037347760567615290390674634414730854185265575140222164503174961698800092751255967840472010099866002000457519001931537796414551413743352444529160365589146049638448119040353673113224988716289090931213918442329681846534132971604583679296172517228115688888164143068705929578598612378866954109705953747700874132700093830455948125739521765408329006293997820771288218351834630249833081922659374337080422425824511407243715098408502975557981173214962084362768546195822246751911179794590099881
        
        check = p3.task_5(n, e, self.keylist)
        self.assertEqual(check, d)

    def test_8(self):
        # shared:
        # -------
        # p: 121769097556608780216445204252679276218159804936050370822200987741788559239737441461605329414735829847259544561626178264753917579705297340559032447639576418084944862577094946662870319041226798118603060564172373356431934342472251516527594940632189095324471295021236123353221691635843186926462420322914077830091
        # q: 111469585032261884701592576581988370615528106612349370907688867609248936144428880411557810486777802751628031428810968108232501137023639154218395505833766744919509653936569386067185100323957789008180026759466319521757506129738152171472525192358473330479629851142772139931687505286428820428358400684099238237113
        # n: 13573550774388195323671647896815502744662545621711177170389659794919664950778049993135213046075001770018649160162532052081979608421738571306089242256541599927555121205792102774611208089273839581584839708191906161405311799079536698643972729836751350841906386842068699857839354614488841141972512935154073791999888134593808766266314120665545158032232671791362628157730066974003407006293656644379490418986845491253482290041664145503677326317011784692860934709660968320608752038408587793621307932962073832016845517431559468208646286074317805515749086991361651882154509565235177502708649601272699628771067465072307184367283
        # e: 16231469
        # d: 7548067685352773049130221120555780214569525594764543878169875337526405515866601910340816747712580634344638133772305547655431319468093400447358899526085416859441698069078042095507081049447502468651661885323562778172479941875366067952959911193466307198327596736635254134228010951186102073173912909792341374275371197516642634113262403034850718518924551338981777133398042943042811001420767929259782996459045936594046869602361931434149872762034848239596892944934628124851308890302890554782844012022379614149661530967844235799620880530849156021395534178720508164231125441041613711732599388490801094692364802840565384726629
        # given:
        # -------
        # p: 121769097556608780216445204252679276218159804936050370822200987741788559239737441461605329414735829847259544561626178264753917579705297340559032447639576418084944862577094946662870319041226798118603060564172373356431934342472251516527594940632189095324471295021236123353221691635843186926462420322914077830091
        # q: 139284989969895329545043001714123614234433671152673124101506587489244275716069459732713345427841653022614629365866369373666890493393044042813819523734512496637421798859983005342823163213296264653686215743788736213746907202436056918378133104441006314259341844679560877613839653943051749211522999334387107812163
        # n: 16960607531815459832820551354029003799010447733235523080749847277701551684750023488092869680537129851722981867620192328023058705280768624972914933518134020116793896730763533598025996957647842967694209109729060841259938518717337224350163560636608878331837558994076247852193709003708986017017863995852560729206661608282858128130042351962475001725390571635831427994414898531974000939659332040769828180623528053992280637632746001455517830079029976492844502967000582332915206575694587286773091847407042298291780268523282133795123178756981398520655600008753133556469439936843341223531406355077240853003734804833229457196833
        # e: 16231469
        # d: 2064119753302687421017565273690007701182231582034995556460162389797739457326786358522408365388769012705264020810758310385041167525480322742499253771661217789983930481320320501457347326245657061911814012262471215130964494397852083397288264229259000273221128216946680593790368910717426002862390288501873673352789396076722123515256350086977490166734525883709417973340454105891696836778825354673079109109476873721995997250370541530256969755549744213382869927465816522701058461704590112098962064662790466162871559849282741494102796221031908874844220158337484257057039638212649171433702244565656445038709350197260686438689
        n = 16960607531815459832820551354029003799010447733235523080749847277701551684750023488092869680537129851722981867620192328023058705280768624972914933518134020116793896730763533598025996957647842967694209109729060841259938518717337224350163560636608878331837558994076247852193709003708986017017863995852560729206661608282858128130042351962475001725390571635831427994414898531974000939659332040769828180623528053992280637632746001455517830079029976492844502967000582332915206575694587286773091847407042298291780268523282133795123178756981398520655600008753133556469439936843341223531406355077240853003734804833229457196833
        e = 16231469
        d = 2064119753302687421017565273690007701182231582034995556460162389797739457326786358522408365388769012705264020810758310385041167525480322742499253771661217789983930481320320501457347326245657061911814012262471215130964494397852083397288264229259000273221128216946680593790368910717426002862390288501873673352789396076722123515256350086977490166734525883709417973340454105891696836778825354673079109109476873721995997250370541530256969755549744213382869927465816522701058461704590112098962064662790466162871559849282741494102796221031908874844220158337484257057039638212649171433702244565656445038709350197260686438689

        check = p3.task_5(n, e, self.keylist)
        self.assertEqual(check, d)

    def test_9(self):
        # shared:
        # -------
        # p: 110244352815963752783797966457925747565698780971889658072099438364816957734985805575744487138939472937417661728975223965661342863009340010443883982121065168059127230514651280829456504764467870651159610217751383640201685265119655522890496169882431046981606939424059466059518964717468354813625557790107651967251
        # q: 116229184905895475567840121695319250907929733487663319095737661821812169869238898243679537765479509648922769314354517308635899480776469144550025954929521344115753758951354095251432814095986272271445405833600049591861886174655126784419298513544016524873437054266473839945572133233440504976586595216288543788229
        # n: 12813611268277429582524804192363880029779222904472460095448123770503566846520332952484632136529517821992595625952975479817483077333428113203661186245820835204620616981991885995963198271030044576670191746420289889410934153356327915699893219235389166255150368084738129757299327231871857161163802385194648706820333739286694268625234230024284461133358155509881136818050333169112854396885973922104532575976300195380398801548265844042848094089173199067853111014614734381339859807492639912197318813755119003447435742062478260205094591149200792565834975429805862395957062209545974616684944623093741020649248831566907787288479
        # e: 16231469
        # d: 11525633058854646813488488917439395448555818801854819736028629334900362114186095533700522122514158664876393910075291695829038263886245320561352832545089384376568056206130364172700754131689644912405044748952263480773445335289935013863717387948282912900564949790748552097705065365660692956476203416690058024979202860412637466075924614667470922545355937966029778252470801604990820815909969805074912673593277441118883606029117685174069970033615020888395841693710649667071818382209261689698431093309694475821682998003377944793329211662631224827146090559412378119749975792726862356663295273882717638102397507260911233954629
        # given:
        # -------
        # p: 110244352815963752783797966457925747565698780971889658072099438364816957734985805575744487138939472937417661728975223965661342863009340010443883982121065168059127230514651280829456504764467870651159610217751383640201685265119655522890496169882431046981606939424059466059518964717468354813625557790107651967251
        # q: 120089326972623314780787439197491198193284827841476831586152988889967006027899004008798930075846499708728909548141478513563679224373130997268842685981556544641030220617596619136250309236967180197124033494503805712006036365143135841951977922424502041347460680927910204586508181042035290289877104189682283408061
        # n: 13239170132201516983962224769718280210538140229681661641540669121347636583034779824901663988252039780531082256999017657624028267787413212294041844827774690475571283773762589178439417570846439514537770998488495049127680887722548271394104501367061857006067437750575262218355705355096008205741349158581587691737141579066806069281775810889640846148994194700156217938106131289338296566624954952706588457113514219649534304374211248896428201409880853624623269124257885016061720357633301306273140010447588236859658453416145311742996740432210695809199347022015328948084068202547545953842077551901930675535699410729483441410311
        # e: 16231469
        # d: 2371441158938651130479827495862930776678630602450313227233236200873062097968421277278949294794427803863548334260374763819804980722411913748119678813387857630389504064828287471556597512364631598297853759995869976351514602348811203917996124966516463911985271117887899438231755041781624462556456013037638434584962063451362389031550154673007676656610153586130376611606273276181368989488990273048451161900244479776495066480194657315632704400371327762771615764650873765113669761055592947634858360988560900049049009325785051398168219261261331168889331422737831744183064459396340931842273550741530711947052495705352986839629
        n = 13239170132201516983962224769718280210538140229681661641540669121347636583034779824901663988252039780531082256999017657624028267787413212294041844827774690475571283773762589178439417570846439514537770998488495049127680887722548271394104501367061857006067437750575262218355705355096008205741349158581587691737141579066806069281775810889640846148994194700156217938106131289338296566624954952706588457113514219649534304374211248896428201409880853624623269124257885016061720357633301306273140010447588236859658453416145311742996740432210695809199347022015328948084068202547545953842077551901930675535699410729483441410311
        e = 16231469
        d = 2371441158938651130479827495862930776678630602450313227233236200873062097968421277278949294794427803863548334260374763819804980722411913748119678813387857630389504064828287471556597512364631598297853759995869976351514602348811203917996124966516463911985271117887899438231755041781624462556456013037638434584962063451362389031550154673007676656610153586130376611606273276181368989488990273048451161900244479776495066480194657315632704400371327762771615764650873765113669761055592947634858360988560900049049009325785051398168219261261331168889331422737831744183064459396340931842273550741530711947052495705352986839629

        check = p3.task_5(n, e, self.keylist)
        self.assertEqual(check, d)

    def test_10(self):
        # shared:
        # -------
        # p: 104227536250944341022209899057590897345747203583772747724685208707628063697202690735026297846503096326548095846126308326074414481270776939150685593172194850168540501157342414513332861994874290880778044860506282962995543478090332439496603170319077377479744315807254277220805553906012310537645236120033029076041
        # q: 132663184693673133442046406306794930724367195819138951841997527754992113044102984164722918422559135296222019831745219131271978045471272927019013249402429819169881066945925505327231360300919132299920496191592741087996862339454219230606261704147922864953114184483199336797507063633119197175706093628224289427423
        # n: 13827156891825540948925223008736510892782989835695411203267086500830736924975486068488332445471745118333340798126279091238491644649083507819424216446105168199466815743062329975345080482289947627592871922298220274987381631385299004822639814497802385847259949597523174579726983773515891221874850284862318596890681248841598618051949277925183254802602789223151756493499846301282561085888493141283317904263272965734899517547704281006262015861117964504293848845832100109612577661268678995859941859617041640182016945142993199364077764636789386936031433498490682217574560953173690270271298326098431660372123758061546617672343
        # e: 16231469
        # d: 9483941631538483191605357080767423698144612169322460982295059551559697292091431181947204725405149881625312827354849293073896654581028821542737160640688968316827037516256747012303431695408084186702027673446864270169618916492365578121712014053467888306065505009260652935742185698465562859693894932752782406462643002132211442799364889436644944512853409919488104421940765880577202208815043980180376275847599244745527051699530381902153966478460068344937622409679346190604512199457137323256314510459933513784400835611274160115869188194510573260733742433452525855805999704509163151330751164038494576852925169871033275700949
        # given:
        # -------
        # p: 132663184693673133442046406306794930724367195819138951841997527754992113044102984164722918422559135296222019831745219131271978045471272927019013249402429819169881066945925505327231360300919132299920496191592741087996862339454219230606261704147922864953114184483199336797507063633119197175706093628224289427423
        # q: 178836850342129097051419413044538613485089526229107833449717709712108764336770151467229814498980956758987012693258221677115432193744806122910676599396151301731071132286720372103708574927169338747928847678801081360867588100971652543036339924882553816490579703097863486336051897899342987236296951039975254328383
        # n: 23725066106972653705617310704983069470786150537559370853554688880236853042607935053760339189493894581835988195324846608386074372644850300054290018161539955986012695916855915595027533311422709704758702286808630921534968239564194172880324618241322572529983436884154616568550698608240726062862565939387722198289183742230337615528322032367252167893262308848014596760053189145553341359850956692160797118412341076379882896418190118094442830859817158425410961270612569177325853708117395364705054257923765746385220730156510547577443247417208890996834707518781642271469343602814221140468923921562716628532370020925825487447009
        # e: 16231469
        # d: 22116921152159729297268490187830282938497937395364527281060455348267233528440260136259177539881460996318757895813548556003234416167245546681521945174337881116795927664106639057161167523793729269021642884300470765101685003964821000252224108778175059047179565152377551245942796383508477292180009500893229442286356380594254304411947444685075850550040486798003154659184533755077565627395757835934571625498416182248912918793644367577865050770466657559458442580444548987197141477485860684702156521527279572387692008966303682812217062975884736659885717119827560407167454928723282155645037246458865049730637436007855412169473
        n = 23725066106972653705617310704983069470786150537559370853554688880236853042607935053760339189493894581835988195324846608386074372644850300054290018161539955986012695916855915595027533311422709704758702286808630921534968239564194172880324618241322572529983436884154616568550698608240726062862565939387722198289183742230337615528322032367252167893262308848014596760053189145553341359850956692160797118412341076379882896418190118094442830859817158425410961270612569177325853708117395364705054257923765746385220730156510547577443247417208890996834707518781642271469343602814221140468923921562716628532370020925825487447009
        e = 16231469
        d = 22116921152159729297268490187830282938497937395364527281060455348267233528440260136259177539881460996318757895813548556003234416167245546681521945174337881116795927664106639057161167523793729269021642884300470765101685003964821000252224108778175059047179565152377551245942796383508477292180009500893229442286356380594254304411947444685075850550040486798003154659184533755077565627395757835934571625498416182248912918793644367577865050770466657559458442580444548987197141477485860684702156521527279572387692008966303682812217062975884736659885717119827560407167454928723282155645037246458865049730637436007855412169473

        check = p3.task_5(n, e, self.keylist)
        self.assertEqual(check, d)


class Test_P3_T6(unittest.TestCase):

    def test_1(self):
        # k1:
        # p: 130003157642994464743539286067476325950372133893802195573367567974571076324665336034649216609463379364219643460571163257412732281703636328681708592077703363514227636803277096587826025323215026462953929690473166234211357436409498284530350420548961005956502333613150452356881747916693114341886827653206106726209
        # q: 96725302468372659048079100916030795650123455355256525277505603642156995823845383531255456692967577963670149984250465838540983279392520996248156132577094589149859302254130905278440421071282521350914076740354009822079913479889561436080692377391403776524134056395469842664357459881145167662647613318974873521149
        # n: 12574594744862172416543115103674479594377469330537204063863956959325664523190836284795955320961881997993211250653509112229399156300936672579457671875141760261551592306964297111405122735516082468431880603667888458829564212595024466781937733970876836013556188026332802657331748481754217816904780568545797719041549148657786850213760732845323538635015848655614883335308089974711605117395135652859982521406207438622783764695700218164485464268526564494757954712080163786413786725432675575950315226286642035935431209857185939981514029446331947418709470636756441575746614792982989738671972370200278262922669574670860714094141
        # e: 3
        # d: 8383063163241448277695410069116319729584979553691469375909304639550443015460557523197303547307921331995474167102339408152932770867291115052971781250094506841034394871309531407603415157010721645621253735778592305886376141730016311187958489313917890675704125350888535104887832321169478544603187045697198479360881613465116988726646076305560021008943568710910549742971477868729918030164416622196051898735850987529929314167252392712354499138286938113218726658283577222499799857583511716056032519928096325414375468950905842616815172353355258465398951892544051195510652268649579629100488774934959987278756755799119822564523
        # k2:
        # p: 152968043948632530907754372502427628475994533276786011780213502659774569872100903266676688058795225256320461103505447163032822349046847138489519850288128605537154260271641730047976256378842431491960718435600989440910089178095771434476222276184141696257814834676800485111664791774280062741916608246271762508163
        # q: 90937265090050260163841294378324210063871738432575795173382073408829954862105986369105999698748723887905285680924624609005846591887053607490997233308304752947342890035917292960501529850588469671870469236505136381510481651382916808161746913226562871491782803012864942668071685295413459930625145900625101481699
        # n: 13910495562863255005107418298927629440327008339151451743202039561690543195002790824671504616940310022612551109976803367067731185439796085119052103988379233724287055031293481654227704963313968528513753860548840042305001404506277310674841483053215777919390198735640048137028514644599649815173497972573918437780800155552024417243458212575577903485389534598095351317471824261659944590939855565696606770458873584206977984035467376019336659369249220917028076769996241607198533168793655173660862295111726722398665265569785317458826890996086860963194271345606639263762977548979307337357250416716437476182816618176927882608937
        # e: 3
        # d: 9273663708575503336738278865951752960218005559434301162134693041127028796668527216447669744626873348408367406651202244711820790293197390079368069325586155816191370020862321102818469975542645685675835907032560028203334269670851540449894322035477185279593465823760032091352343096399766543448998648382612291853704166828657156301591077939131434431233112217590659673678819123727560044137099117373882721800886423375168158167358202831531993618876880114031706457599872165809357345657397433768256339254863880823222718598452794424270880111072115147037534770797289797342253274193094606385009293097829302340183242686687345746051
        # k3:
        # p: 114549486803699384894143394286990651146555165013728302481551264648497838235517486606702338880752451919096830292370682228269889697732665835525011282743639959647248993506042494380430738547979142132932651394574083726936894717986006491945985155478431088177702767045520642297327787982417554128672651123519025244469
        # q: 166155880217918559405893629731766021934316244842207042078137956674485666428412140071445595256642848338214132442407917856810703703287213406727795409133252226931597367791481956598196609412608636022086670522735972255412377903239273392280159641923398501301184799873160432724170125400505441223259823365691175214683
        # n: 19033070808379517697491695331924576448130914032423917329219538860409785728850497873635119479014511937566074324111224314148134078651150827658862416079600000601113941478520015591911119098423371094658932554887257926532702162108738508016254120945133385075366354885333479538770898354206846450586064808820034944280305469520391575913029740190050574156254890850939995024431976480600444889691654218467441580165898561545007476462460889635448353854703686722295465471860588620823059164983500387998560976523086994123133057200678551778045747330483298988877114259493923534462304090107929256155498198549121772253906641965757633338327
        # e: 3
        # d: 12688713872253011798327796887949717632087276021615944886146359240273190485900331915756746319343007958377382882740816209432089385767433885105908277386400000400742627652346677061274079398948914063105955036591505284355134774739159005344169413963422256716910903256888986359180598902804564300390709872546689962853349842768913305312486468777354544988782679627389373119914858172851640923351816394526195764019002174191797675818454859700245173635789204986695105853322464289496141869123983958013289085708332810645409156855578997197130983139505346069767312974728062629988944348792832120756000190110799184601316111651031621919451
        n1 = '0x639c277fef49f9ff0adc303889384b88f5c90d2c07ec46de7f5d9ddf1d87741b606cb5271d806673e3df6ebf67f09b4293509a5de0001d21db3e0f1a460c603488b12fa06f73ee365e14de693ee2090dbbabaff6541a8afcd0a7aa414f8692bca0fd5856c5d2fe2b524cd225a8d881118b54c6176b5d4f58b983ba8fee01d24ebe739d4456eda16dd140155f32c01613e83c2fc4c904089d02ea83a59fa4949b93547903e552a5cc0c5a1572489cdc41b2ba7633ec043f230c56fdf44536f7d8c0c2f217cca5efd63e04c1c8bcce1ef4528933bf5fe0b7ae070a21c80abb1bb1ee21e8872dbafc34b7cc6f32ee09f58f44dc623615b53c6b08ae75475635ae3d'
        c1 = '0x13f7e0209da9cb600ec04c8bc2d6b561b8ba8bca9d4ee3d0e09837732e1746a47ab39c90e8d9b66cc8cec849b10e25804f52e46717b157fc6f819b83fc104979a8bac1b6aa0746d7aacdc5821f779378d01b514aa1f7fd0e68e58a246d37a0890285cd46c07a28476a2ee13cbfe6194a78f86db8156b055a734060d54255a004af7151e29c70c4ec908fd3fb11ac860b757e8587ba84accb3dfd45910f0d0972a6eb83bdbc7ad171ee35042c53984358d1eaa17ca756ccea3e53eaf3ca549db8'
        n2 = '0x6e313de3f2d06a44b68bfea04e90afbff5c238de9c9d24ea95b6084a19fead9930d001989848723bede73a76164da3d68ddc03282dde0cc40aa10dbbe763a87b15f014d3f95643f1bf8e728ce4a344465032c43c36e41fa6f5d85cf81d58c1b84090a03daf7ca73a1295a431bf6e61dd6b4a90b27eca4f45100c80e6d97747ff6846fb1faf32acf7a083e070c06baf3fdbd8687ac82e6ce7cb9aa332adb537e70bebcb6bfd533542a98d0a500b33d5cac4ad0109e67de8053bfaab4b013c307d1ff97fa410d7705df9ac2a568311ff44d023092142aa62d4e804b5d5b6fc9fe1d22b0b6a3a84dc60dc88391b3fb0329984b558be3209f3045fe263503b490129'
        c2 = '0x13f7e0209da9cb600ec04c8bc2d6b561b8ba8bca9d4ee3d0e09837732e1746a47ab39c90e8d9b66cc8cec849b10e25804f52e46717b157fc6f819b83fc104979a8bac1b6aa0746d7aacdc5821f779378d01b514aa1f7fd0e68e58a246d37a0890285cd46c07a28476a2ee13cbfe6194a78f86db8156b055a734060d54255a004af7151e29c70c4ec908fd3fb11ac860b757e8587ba84accb3dfd45910f0d0972a6eb83bdbc7ad171ee35042c53984358d1eaa17ca756ccea3e53eaf3ca549db8'
        n3 = '0x96c55dd4eedd475663eaed15563605b9a17ee7b68caaf8c74e007b73aeb285777efc47626eafabb19bd147fdf4471da1c10206d568e7ae064c8b389589f9bd477070939c89800ed299c6bf4926b6dd5112e00681cd0bbf1c8e10af780fddd87271f46650b2489a7c1724a1d773dcf00ed1e23ddd3749c52b3d3a700042f4b8027576dbee07025cea4f75963411bb78ae03ec8e1734d6a0dd8c792cbda3839b485c399c5fcdd919baa28f1b2c4b65763a203942d1cd63a3b8f2d2a469e9ae8d119cf6ba09789a97c2a32ee02789c248dd3d5a4453c37a4eae311b197ca914633f36280f3330728bdd8358ff43f83785a680cc411edf9eaf4d7bb9b3ea65bb1bd7'
        c3 = '0x13f7e0209da9cb600ec04c8bc2d6b561b8ba8bca9d4ee3d0e09837732e1746a47ab39c90e8d9b66cc8cec849b10e25804f52e46717b157fc6f819b83fc104979a8bac1b6aa0746d7aacdc5821f779378d01b514aa1f7fd0e68e58a246d37a0890285cd46c07a28476a2ee13cbfe6194a78f86db8156b055a734060d54255a004af7151e29c70c4ec908fd3fb11ac860b757e8587ba84accb3dfd45910f0d0972a6eb83bdbc7ad171ee35042c53984358d1eaa17ca756ccea3e53eaf3ca549db8'
        msg = 'makOxJIKdoqnbDtDOwcmHHHVRWVeMQVkdRNMUmAXwXwXnMhgVzXrKErnLkLSyPHN'

        check = p3.task_6(n1, c1, n2, c2, n3, c3)
        self.assertEqual(check, msg)

    def test_2(self):
        # k1:
        # p: 101740602499095689260738262081325526158954984628107173561905826961790912358853087370876263360926149945450281590485361315198151758443324220852434461285229462643962277622746430324067876568211497519799586042667812762938080051854422029514838916084809099209107484004380207125871136177887671475485015753259310282907
        # q: 175322192651781151890060325025462446181560854057122239372340112719291953420673801454659872314781531547520441557352984062762543139628536194427680077105624972904979229902383010946680054060573556592984982743785158378848352032079044666679479834434671847433612661452195035882720172911963010939485286801459941313603
        # n: 17837385511854741349792830180502283085971842386586444099845568095181556255366872399015262327845448174073061995249170766268351107461087643872808633698709254179583354395103039270544015932704879483912385192329584747878390366385982356098011880278548910135430340133642771729947612407003483970461077013124067649000899188827464204558187693667737927234173320955533476796459220622493876603976983842513786491888980500241504188302017236538302143465995133092367119501779426524963944064052734904686528193191621617960112157515327941942573242387118440721818359026116573442596694918067258561280233956858933087428578710717011137483921
        # e: 3
        # d: 11891590341236494233195220120334855390647894924390962733230378730121037503577914932676841551896965449382041330166113844178900738307391762581872422465806169453055569596735359513696010621803252989274923461553056498585593577590654904065341253519032606756953560089095181153298408271335655980307384675416045099333748084021542218478024596720420759507888536744565498255683316455208529158798304635792166904142181879165688976769452594106894299045282181784724669975592381392943335037685070308943853508375224375898218392485916647200524540202123316017082693517064728330635983181740455545514428431846054936675738938774861257258275
        # k2:
        # p: 154369102482822711440454450204885240379126448458864757637242531931142569354529820231197871996917201272098148836617762956845901523206466134893610211683521392011842517224446498336033561582454078321588038195630696797823598910398325409410717494913627971113507528601134770216718516592346689521492025517756616224563
        # q: 108177677623305484630966567363045229019391912320122672973399624668926844911250281397293665479290768720295405199586640779894312508839433156701625638826871374897752169495872423989042024155351456450592548698259289856672640815337206270510776590619482890763053766163439872035076341844610653308579701364324976711197
        # n: 16699291003385801561572840788562246492319913709740495725068063138929319539498490179173345209748284289744339715409635000734898914416806711436895959612441847694706163961026172961361327735307993696542636335648869478791362711938342888132102518928730916732065391247427826428931564187973781495798082007172438288125026317975060001550162965397210388184069407953020003746201475111691301156813828743588762800905046248372807561091842006115895920758680264750221566566896003138576757383728697671184362397496497518158991882739033743528579762053581268318175959578659756032284893873483679443693685159479123551030247670077774548531911
        # e: 3
        # d: 11132860668923867707715227192374830994879942473160330483378708759286213026332326786115563473165522859829559810273090000489932609611204474291263973074961231796470775974017448640907551823538662464361757557099246319194241807958895258754735012619153944488043594164951884285954376125315854330532054671448292192083175847463302582236061029586428305143113926394827344210393888636727487828365365761306847508952558852253609338037091734919437137817756243639084220477590406914444775131338919165906191207839127988924540863896762504582722348218563824425502976995417763446938888385812736534294593534028110805466783962130461970397435
        # k3:
        # p: 113984893854335101810317917417617268283891785981334706959854814869439957369129984093674630702113191131976132953222352542987910100916799624091698404797827279402801689430069265431662115470254746611213855326881050890012959308627323225999149533918558808067190189333419091924349955089253771587467494988346249660011
        # q: 121247604833267499137944923870682809506764538412824142400348355155968512086194514620559676226950675700322764444836760206070150891959559228307199938331142297609588396065470498300701983973280226064811304266157948554418538266090525374265881652753585196992630272914829880637276167667692020448782812444641023285013
        # n: 13820395367012363549103028063694061067757841642977198087426725440771318852440401369150653881742111365538186392018788019993499977382596856875101534085389879396920650193424449781306645277783516903200524780882429825536080191260672620904750183259244955657091699661471262223194561331365363865095040850488701646930520103799935810247834146193929142530609741451604860268174402368177460544477289168455304396624950988807371968043894249926233119515474355610235728086571918930413865942774373675627460212476899631086404017585693289211673786237446162707369439114616252175443585518486876099620567333361116618303207086222885601715143
        # e: 3
        # d: 9213596911341575699402018709129374045171894428651465391617816960514212568293600912767102587828074243692124261345858679995666651588397904583401022723593252931280433462282966520871096851855677935467016520588286550357386794173781747269833455506163303771394466440980841482129707554243575910063360566992467764620189914200832138431257255568427228301879390084807134279209466132101368050014643113160713393130591414650048713763890091451450039015065331171891219828961966235600983904852555941263397408688909772273585905328436193178161525775152209404736271951962738780255843370825751418039294140402780550844637852526598885846747
        n1 = '0x8d4c9fa513f3302b04f24cb39f6f329a8d4747590839cd5952d97264c29cb075e4d90da5f2bc3672f1dac1559ee6f2b2b775f227d14c29f097ba77cdda811acdcf61b73d95ede14d526ebce295da8acd2cc3cfd3054393dee854704f2d74e4da02530adc3c117b444deccf17289e80e87940da44a72a6bdbced85b9a26e7c4b166ddba7e2d4c98b9799638ff04162adf49b8099ee20f11eb23e4d86aef2bd8651679b99a2399edd987ccde240e2098a9d834518b87e0998489aba358ebb65269c6bc6e5a5ec9152f11dd855b98611839fc5255d80e07116a2facda0c38c1624439646b7de2a336192a8656f21cdf8fa7b14a338aac182819d607a6890af55491'
        c1 = '0x7234b038460d68986e9586f6740cbd04975dd2d2a62245fcca8da54dd2814bce66a246bcfdc86c6598e0392ad8d5681a4c70f886149afa11a839c542b0ce006d5cab6378e4ab4999571d872332d59defaecec084b5201740a4ecec9ebabc7720c50ef42403ab951ce44ebc60bb95528cfc1e5e1d1d22225c5d53a8b37f704538383c44348591dfdde9eb9fc7ac735c86d9a1fe0e953ae51a4e982420efc864977f9eb65308e85da6b9683a5958b2f8b127676e537a9ce2aaa2d070c46a5f1a83627a17882fa70600309da9e2491e21d4b0e84ef0dfb6ce9ae4ae704c13a626435b84ce8c05cc5a761d9af0c4f8e6052673c9727f92f31e8aa83cc1459775d2f0'
        n2 = '0x8448ab6f3a858216440ff56eada3d3f0df8878e5cf478c6986414f4869f84ffae7dd2af2457aad7069987d8b911036477d24525002b672937eb096f7424d98f4639c9c438514b723f92902e742ade39aaac6d7640c6460ac92eda19ab4068ea514e753a12de630b4bdc69de34b97c0158c1779f4b8d1d51f016593f6e4e2c6e826cf93db7963101f22c7ba47da2f2a2fae6ce42f3a16b4e372363adf36a8bbd820f31ffc5a7ccada146e803a6e33d1def6a0d414cc7a5389bb6d73b3da4e5ba9ec61e4479f0d4a9e3b38a699212e876d39959c9a3abfbd54bf84340b29f026656b11644f066781ba3b85931027fb95812cdf4b25eaecf26c91835442e3157ac7'
        c2 = '0x5d9aaa8cf3af4c493fd79ef5c259571170450f396c5ab4c25a3e816334396f9020ab2083aed9b68e5c2e14b9262322da2cc21668d700f7e7c7d737a7072cd851a7dadc552d084194faecccb21ae269799901c79be01445d3fd1531b38f818db39c09b7d39cf95a6a50ced43484c02d72313a77dbe79d34b2aa0242cdbcf492dc1df28a4a24a6340666ec0f0bcd4c95e54cd020fce883db98dba3e0b4775f76df48cfa0f579ccce19003d33a2edfa9e8b906f3e3bffce187b5e0c0785d3a947b89af8f7b107892a8326f4456062d7eb79fb3ab99ebc5db6da7c68c18f0fb831c2380efe590e7e5f9a1cb1846c25dcc3e19fc230057e599a893f8c8a0a8178ae2e'
        n3 = '0x6d7a86d03c773a1ab68c51cdf7cc9ac76d2689c58811d9ebd34d5c5820c0faf474db7432dd10f074fb8cec53793385013ae8b982589b202c049c4a8db93162788844ac806059eaf248e83a9705ee6fb57e27c123b40ec2fb79cd4244ce5a544d73d237384443d95541342e8bf55fe0c85257123888de1cc3a9e4bf4ef307c9fe8674d73e315db7c12e004431fae2e0d375ba3a9132d2d3ca63e835a87079a811a3be0c608d517a6c5e69f15dff2cca041e1a6e3cc8c3017d8a32faa19a25525a9077509690697c62fa5cb8c65a0b03dc43081ecaf1662e84f3b5b283f9772e4a0571806ee808eeb53e12faaec48d77de6ea2b87bdd28c0435675eebed708a3c7'
        c3 = '0xae4f083f3e69a610b395533ec35e2761c4f74bac6fe5e082c262aba79c62c03ac21a22036db75c69adbd8158071f2e47ff2667ea84e01719af7d4377cea1878a39de6efdc4a90ec837b32e3a6cf3454f965d481193a034dc03f4ba72bc5e42c7aad839de3aaf26a3257f821676f8ff572fae87776d43293209f8cadb4eeaf47e05265dd978b048016a90c49baebccf3ce5eae93af37087776898c48d6b18f20f6ae6ce0efcc65007080915b4858654cf7174f9cef70f7faa4ddcec0a8f924761103e4c737c53e7f583340ae1e09fbc79326edc0f22e185ba066395480ab4b405a07caf9c8a3981aa9df3695556d854b8ccedc71dc04421006798931aca6556'
        msg = 'nlHRlLMMabwgqkuwEwRsjnvcPlPTfTycfDBNYOdTTpOUPQIIhLZfCCxPOhtjEDHypqsPsChJTIPlWKipIuhxinfdVLaIsmGYvuPZrgAqJVkouyN'

        check = p3.task_6(n1, c1, n2, c2, n3, c3)
        self.assertEqual(check, msg)

    def test_3(self):
        # k1:
        # p: 165971444874536458572034765285778230106634513713716975913317814269744550206179747303146110577406595428167750178371756539232418668127162330979204029189068097628578537293015486313926111564866223763908038788096844220018602158319690307474837250281042273823724840355647125923083701174079743206500819639916865217019
        # q: 160026645295196580679562249590315391630909734462202522552365335956678310649690365701229746241382487505866459084519236862056079043763195905843183187747301024878081284117231831049947262671914334304597146504257957201051564516707018084782731402304565528862823452970166560527102398762954897292945048740691839081361
        # n: 26559853538068718412873834414516919831834378940342628738633944864359325294021249604519424188210914755804792309258789924149191746367249812695569127380309239063160696145633298024415112298913396823243530056095302414252137767580900515512450764867321352430804436528954314394693135227250170523151945291864451720730541370765152970489156688025496336705785702004123982098471351698135810229375429243716756357723568852930988037010150231415118595081349246036475413291559278522798888908447586092208014033317232745161159751330812778797537654444961013152355559135744675034786931902627155201507962725553430173615263344213278862882859
        # e: 3
        # d: 17706569025379145608582556276344613221222919293561752492422629909572883529347499736346282792140609837203194872839193282766127830911499875130379418253539492708773797430422198682943408199275597882162353370730201609501425178387267010341633843244880901620536291019302876263128756818166780348767963527909634480486810248449988824966603394007080162056032105170632041733337112365272924912346372753808253667269853179997969218498172825342553398246305925199768684049748606266861486058024892516562760439386968124728436377358971984917644991846622869840065326988772711488066922406200894343371851083744263688743878317221780105722987
        # k2:
        # p: 165825552371176433401022199878951385999711340932142516545142607230647237131935409060925481511422263655856078674918374037077141530529820050378610799658877630230548098107468183784850458741420604986439436458437114375264195452731295635858033689752452699017611580520149227567548880162877419852499999505432181577433
        # q: 162612344623864191570716782942507708485761901447079321858615810114100754943445095489746633781220946809557203483239810101036685305237277434397112816257254975554468516760247758236204446337810011517519578580878001431659249140121083180352960349574946530117314002286944160558413460941867358774638093756824619064909
        # n: 26965281869624382044711655039289039438596055389620381915060535804222901227919304705591544321189888425004529415064163689156771497903540360234440881445721474366890750089070356555851986401741061928152989467710783371864042995834887193934621304440394848507974882714320388509083730760160419298475088751865330315563759668452390528331060562979488223671369779167514011795987625802513575821068177417906524329990872250846261688134192765496811515361937217046261152404566903563421694172940678454245792159389357691290217530421528348266316869943378559319128014092866422624174655321322793094667344145579178391252675846646697036598597
        # e: 3
        # d: 17976854579749588029807770026192692959064036926413587943373690536148600818612869803727696214126592283336352943376109126104514331935693573489627254297147649577927166726046904370567990934494041285435326311807188914576028663889924795956414202960263232338649921809546925672722487173440279532316725834576886877042287487036930325137392549331111176384589537283423193305055911590112551885995197942237234809798819360253898937317356387572465125684113413040990285859100513971757785038715308341483158169540084716524172343588142154972928950233684120335278013369026015596693153159010466471027587869649622408417025168922960157304171
        # k3:
        # p: 137210518716430653797477891765087027921311618520150953397612303119857613236097403410983378459233773320721472902261236943782332762884891220932960501913914904035029106786023274320863700400266077490169476004171960625287193404359704888888871388759219875241960404660695751207333977311031973191937181114007170908059
        # q: 135213856032460966076619760830122912665591287785777025991856694544047312135268912059573230799133272468256671477433589179950974613025841855493857301371384339880757908917410960700172625164520181368139336611142965851124698831176296108173590200204897352991388868323362341245671157398635294315304465219435385822973
        # n: 18552763323862745249967485042015784147004265617102061700365726403185436883619730418988938309027549149633670133665140144123212221317535178512218960509926726200113441601451466297565393677732057297683233643114254675116446252618515961697397749130522087766447240956248361385441481888831831489582072497116019211794317968060148122750870898068641259050364358633472314761695729989168227672232552244706954382549123785377131296962863363697343835105661373746067917473899375585811563026018929022215356184156092325285452607720621800539587280336522565341371644729918900965231626443126710671017546339811770930117377343549731433039407
        # e: 3
        # d: 12368508882575163499978323361343856098002843744734707800243817602123624589079820279325958872685032766422446755776760096082141480878356785674812640339951150800075627734300977531710262451821371531788822428742836450077630835079010641131598499420348058510964827304165574256960987925887887659721381664744012807862697029123599487420664533610697366073184970484777591188204173994336215164574123952824265182193837826392102101722112358382407018486500427113094066447076050894597184006876996524796213239060870710951429196736871249375450258733991042896206122093969855824665518113428435052376360803401402441740090464810859250872251
        n1 = '0xd265025b3afa7f145a79241ecc7b452e1d6ef9b1709de1e0348c44e6a3feb06d2b63c9035a50f8502017bbd901694b5835fbdd2583e5607c66253e5283dba88f9287fb0f62eaee0f8dba61ac03113905e2d76a008218b893de9dd0b957e9261f4a2ed58192804478a1962e1ae96321b4900d680c675e8d8ef7680ef84c80df3bce5d7a8dc60e7f6ef3da302e147642703725b0202b1762e63094b21749c9e57061e525f5e55ac9178844ce7028de567ad509d841913a4e384805d08ccd5906cfea4d72877ece5b640e5a569216041a59176c72a9085ce8c71593d3a9eec70fd874152ce9297bab20854328117995fff7a5cb897d37412ada49939febccb4382b'
        c1 = '0x8de3b5bbe7dc0d29ca7ffd2b17f78424e656c211d05c78510cd4eca3cec10549cc00178e672822cfb89f581baf76f812d5d821b25d47581651f91517af4ca22d568ba8474a7b172c9a8059d6d72af1b09a5d397d0236fcebe33f1b2ccb1b21e9188c1ebb12883cff7a95bb02e628423b31033990941978f5ffd2ee6aa4664a6c58a9f049757bd753ea206ad6987f4352711f7d8bcd1ea709e1604616b93f145d7893123e55ca3eb3cdda9999a2fd9d913cd745e67e56c15aa28b959bbd023d90548607ad7ed09f2d112a7d19ff1a3a2ee349c9006e890aa9c42534111a382542447d3b8d5c2609eef71af1b7e06d60f9e7cbd368d3b826d36411d9fa36cfb8d'
        n2 = '0xd59b2e7f0b7e95772bd56c5d1f81d27da11cc93128d778dd5347843777dff4033094bab6a6131a86957d008eca760d35e255f6aee8fb77b05f1fb9df97be88299bfcb3a63500d033e0822de36193e359e8d3887f620f422c91a058752c836db26c8de9c3c100341e265a715a6c603509ef3f8a34baeb35a04ba936ddfbc64947bbd93d0ac6fa3c59afa7240cfb254513317c2db0e6000176094429a0db06581b83e6a1e4bfb1b55049af69b698e05353a34e4bf252aa8329f95d4f2e501065f6d58d2457cc21cbb4a4f12319957c9583f68f1f93de5e7e7581827059da56ca86587ecd79704fc01228c8484c8b673a73a1fe44a3a7228e0dd5eaf6ebe44bcd45'
        c2 = '0x13fd8087f2c87134c572b21763af1fb300a719dcd1a829342dceb0f26a773e129376e2843670cf55a675ee3bf35244563586cfad247c0672e7202c795cc05d36a4bcd9d98a4fd4018c762c6539b90be963dd632b0d2ad8f7350c67653fe681161bd934273d47cfd0a604bf8c9bf7245c8ae60f212e4981de876c1d5dae3cd46ce095f637e0a90ccc6e830ba6c2e65c210b6dcae1da1b9ab03bf963df36a5ff894858648995be7e7c7971c111bdf8d4a1e6628a7ef74b63417ee754cd688b33a9f9d27cac14924ca75fd2fe5bd96a79bf045e4ee43d0971f55b3465c25964cd71002f65b0690a44618798df1feff26f6b14a4089d1cc55578e847a78be4b81901'
        n3 = '0x92f7588b85a67ec4908057be53bbe1b331bef872f73a87c4a41f966a2d16b645536495b04ecc3cd5332b68fd1d0cb22aadd79cd4e6e8b03b2378fd80326cc7fecb1331ed79c49c8da1dac7551ca73eb0571d9a5b90503cf28b1356d6d1f200788bada65a0fc8cef302ddf1b7450e608e8cec314e1e76640be1a1317ca72ceb671cf34d565f81e911b3d282dfdab991642d582f4317f6147f54bc54f649d6dd462723ab36a95b348b7e67f817633c45d28cad08d3e8923c3f49034fc75f8c9d3811d1ae55e4f71751332c8f60b69ce82a8a4785c26041bce9eebbbad459c17a2336de42f100b6bba8133665cfe27c5694a899cd4cf58b3a7f74dbcf14cc23462f'
        c3 = '0x3feb1889c3050a4438d1a684cdb3de21e7b720d2991d3b86278dc7aefb2c5834192b5caaa657711f500d5056b60e840e4d2ce9873dbf38b5ff3ca9d8ff69ad4293fd90c555dda5a8a8524ce683052bb7b557022373e1b92b8440b3861df4a9465991c45d0302f5ef0115d2ecdabba578095078da5de1554999a46eb097ebbf92b8bccd455c899bee3d56a54f153a1d5be8ab95ed47d2d50ad92deb82d6a0a8b5d8e162e7d848051c89c1e95d0f77f5b62baba9f6bc95741b41f98eccfddc679e62bc8e5fcd782ff837675b45f5ab52833a174fa7303ef6b6ab34268222eda2e507a8b2cce9744da5ceca08db6878ed0e27c6f000fd97295b4acd8cb584569955'
        msg = 'lnRnMZpywVsCxbzpKZNFXwTWmmHEEPJyYXojldGrLbTJGSRXxixiGMakwZCHkygCHyYerTbWluPVjWxbSmJFnfrHDgfLMcKTUZQRTHDdmoDNqFdSMjFYlbrheZCk'

        check = p3.task_6(n1, c1, n2, c2, n3, c3)
        self.assertEqual(check, msg)

    def test_4(self):
        # k1:
        # p: 118699598176426639435604990992915342678761138133789403583899743152016838158123743412334229619141829815951662630816341541814243054660822710285402174919691476200498251215394826782235473782731590938772039533938808575530024231504064580909986835193440838471354958750737792263936186515139024877029220107540994858711
        # q: 169656109822791922781061952773637673264962061025809218324115759044517745533844332827525153189832387794018326638409316143554647018577200293780251525837265975558999435229620828658485161696770838652653004186025671068669813845676062545430299247758053562349008538948879336212564638183948839647026396050348120975019
        # n: 20138112064141109787512208531186401710204206351938479208332213830616658760745377353878856430261696797829855454553676138708204336867605609755331252475538827850714387798018748840213836195414305647723583589721660948469103073966742376287329568551850582926598309823755621834399249896048607022586809982448842807541047526299621619312082784940416599499240680372934085753699236628806108012615168467054938803531665814442494509776551001565540460021620460354325959389636697279967197010175675906601733360016621500133676413769793628564900882044575826314446701316290100544129220634067917591343564651829126272347609656277739465540509
        # e: 3
        # d: 13425408042760739858341472354124267806802804234625652805554809220411105840496918235919237620174464531886570303035784092472136224578403739836887501650359218567142925198679165893475890796942870431815722393147773965646068715977828250858219712367900388617732206549170414556266166597365738015057873321632561871693839447061081600499910745331100030988864638115849658087860814084406382285948800260543386280481794397888349680338216895920114379965588291566840203792586493218805132882487106834107341816358079380361500913366552765947134029311597132792070943488892404095539238090912200308578042551420025605215702693413233566471187
        # k2:
        # p: 100598268624791753045523964389891512085594202608442798152166177202135285975883249081764491217378885865806646117132867173113908801099327135148580113835910345533958024985781130065802451794229663729449249915121351190239983163623831151434629797836642648560036256707514677754647083471276173623510518647224960499779
        # q: 114383122406396105925955064532903620479651629997795248036977303859169048290041520729436373213099304199443502743033940623175555578944856208201924942952428604417124810352440203643139687637946366378383851003164501448177298256825564367789086121160905700386889562471375710001823692811263703110964418014874217322697
        # n: 11506744073981071945208590362922864447938015828719031336725862850751540250089848299892320056393845940616953630566761057870746546721195119665190367905415007130552150233296229576129252962527694003293753693339737283810526443613827865930086546752935111973252620455195899293219359208394055685059644355949501774318697300121818784027557459554647858602802086178922845984833137381516867152400548213499113297869055813999350401959950812633085014757816560426042624351957272545676633081216202238306168941456218107761454696390889530932407461799683757407345917743899742031372777496284936712055880051086434495310209815694376440183963
        # e: 3
        # d: 7671162715987381296805726908615242965292010552479354224483908567167693500059898866594880037595897293744635753711174038580497697814130079776793578603610004753701433488864153050752835308351796002195835795559824855873684295742551910620057697835290074648835080303463932862146239472262703790039762903966334516212321545820525064112390653683816708980157893564211071959095995933637041878756415629125274955625718415956066835399856003224530366918514918055128079530112622397150366830585320603064817868016028051769081063648402452195993453586156241258748134549934795788283901118070697549532939516535929745717156586021518174907659
        # k3:
        # p: 109195035517896398156189925487309609670187681755990867135896327570418663624982082973819789301383161882427127826785795975504814432953637545405553385495863122790737345958827676367320189999401670381128279504895769480993542769909915528482343368730553012094916414593787313987676789024910670267924055359891156409097
        # q: 161283898067543997932109182375603193228954297852529872489933791371442214282519271875271851866001851450062487841474412396229336087054501526382272778238388578248461807144932288455918464465262108755563540953195114226428332738193792840338287023480687890692887502068898697017504002361473640421173483225276119637909
        # n: 17611400977950249108007707050356703310394895678087410513213125864064776407545460012029343070754940710955715730585317393458193333698742029778239694767133984086454768603655885855846855836223246471155243188093067009711045837227414958526827407203290707526539077127615349958110854665085905779706218052124734958164291579823984688420904935792542765513169443386727131566569476938442335616663818549916713024259680687330001281046414511725931870362171442096527817921635866205010623707884831320640674763486223088646049428562164808322666276877029960763412502833778990254326037122224599762213522348160686955750583687156148313658173
        # e: 3
        # d: 11740933985300166072005138033571135540263263785391607008808750576043184271696973341352895380503293807303810487056878262305462222465828019852159796511422656057636512402437257237231237224148830980770162125395378006474030558151609972351218271468860471684359384751743566638740569776723937186470812034749823305442680733926932832016544424456453235140180200938079073884629097879666983159170878130045080922061530449331674443585436202236131813228108868683159994505267743002647616369854047570544957406014372873006238405402715949743496267579284168263061248294378499567692155470374609167472227704516201763374324099047320691740779
        n1 = '0x9f864a9b761297e87f09b902af9b6445bbff4ff212be0110760e119ee3978427013fd5caf7807b323327b483f7ccd6ea15b6fa8022c0ca2cc2285a700afa9c7fc40b56070fdd864f50df7976066e215f27630a56352d96461fafa161c27a930018af2e9e161b304d989d011e54e1efb399a31a95cbb0c2fbc1d67a2d51baca3cdcb5ee8129f21eeeb5a3eed1af2a4d873d8ca982a4d405428033606a5e3d868e65970a51e2b4e783f3aa93fba1997678ac898e32e7591eed135e9685b4f278f3aabd111a85cff9c392ece0419642e6b705ae5240fa6948fd1ed67716ccac80a63df14b463e2d187524399eceaedee4b371390289e37c0b2727bf5aeaf69b039d'
        c1 = '0x3e4a5d42d552db6861fdf021c5df8cab1379a74111a91d53071f0d5de936d4a07010fe57c3cc8b82ec1f534a8e656073b2fc8487c5b3a192d5a44bf9a0c6da2f3c6ffdf456277987e2f18341459f88484754f66975f2e76f2ccfe5b5ad2bae643ffb8b95dbbe6408a3747722b6541aaf2d45f61679ccd47e1732759d954bd37c60c06a1c263cfd87c01b9b590d64046782c4df240af3b99c6fc9af5c5ccb69f1c299be15e95facc1bd8d0cf8604b3b46775e8907a7c1dd9202d74ce305088ad571542a6925f05b8e48efc71dc8bb5ce6a74c845d3e9f6cea39889067e5b80c35551558b5e47a2250df974a86543a421b148d2a72a5cdcacdd166d478b8ed863e'
        n2 = '0x5b26a608ef43a0981c86ca897face5245ec480eb477c3306a550160eb819f241dd8b3c940dab2f1727a51193be5ef46461ccd9b34792bfc3143eb21a8f15b14776a136513b5f40b095e787ca2357e0ff94d68a36c9f17a13909070538c980c6d8d90f9a59747b0dc92edcfc1c3136f26fc5d9c4ad110bb701f70ff72ab5ee225b76dc7e0894a1a5118c37c759b74ec6a284aea263bcb1a14d91d143d8acd69e8b00eb29aa20156f3c6ad294b276283d82fe31f03ae8886480b45512523cab96927072c83f08fc7d7c99ea4e8df5cf89e404dc149bbd2604211e4f4d85a34bd21db4a58cd038974183db65eb678cf7f300de0a7053170e3206953b6e90e643c9b'
        c2 = '0x17301d38d18cc27fd576901c9acc0a7d07b73baa647ee6f7f072e19a63f4e67e5a74a97f2e1bc052e446129e789b4f7363ba1867309bc83ff9568c86d830242e3bbfd257b6937cd19b79b37f63783638b4c71ed2497c86c4bd74d1c0c0254da0aa11bd8c7899a9abae28e4fedbf27e6645ac6d5c74f6a96790f1daa34b1c4df8d754b0be7cc9c20bac8470ed6c86cdfb4c3692c248d2026de1af4515e36b030e444c9af719bcf7f80fe9f1e1dd4ff6b680e554472b38d8119417396fcc459866e39de1c1a34bbf58032925e20afbe351e1f7b8a3962c0b82dc0b59a8fb77d38a22ca8a1693086e2211665cea0a62e558d1292f11d66c4c333a6722d4c848c864'
        n3 = '0x8b8258e077d091b7f57c5273f0ae7f572aca1d6a345be2acc5f3f2f35558dfccb2f61724e2bad4464fb2fa81ae5da87c15e4c48af564807e4c6731c9b1f5ba0063ff1cfb0366ed622469ffd2273a762f03578c10d6ed12d6db9c956aa41a339102e004e8b1198e1e039102475f4bd49bbf73a8f0c16a4e4d3e597f0fa3278d408fd89e9410517fda50285835a108ebe0476d9c2094f4de9e9a1407ef406f7b8983bccff8ee70f05c3568f17eb1188db7ba1beac69244b899f8af31221928f781c4f74ae837a2b972350de1d84951324bfa5497a9ea8b76d54f40c5a451fec057774e1ea8a9f97e25932d8d311f6d3f35d1cf9be1759828202b075a8205f2133d'
        c3 = '0x5bc8fe580ecdbba5e193c21070316f35e7e220b0e74899ec13d2e04419227aeab1731ec40748662725c007b70d981f0fb7c25560043b9beb63665030f79dafe5a7e257bd1b610db3e831bac078e374d5d76bc4490e9d9fa86fa81eea7d7d64eec3d426c292247203ac53d4a67e245d6007499e8627a972d81043cba51f2f58919a065b813a56d1ed51b30d5eedf1d3f63edd84fc8a8b5301f174cee6d832c5725685fc8c7a348656a451392f327068972cd4762cf52dd0a9bc10d00ce77c5d6084641574bac01f595840f4572d1898febe9232b4d7b20efa1e190c4417e06200f6042a86a795bdcefedde56d7d328f498a9a7222279e6fda58d716c910a946d2'
        msg = 'fPKXOVgTykynhuNQXQNJJdHqnbqKvvWxGzTzclcTFLbbuGOHbGVpDWvYNBjkvUoqTsunTZvQdsMUuwyAeeFoDXK'

        check = p3.task_6(n1, c1, n2, c2, n3, c3)
        self.assertEqual(check, msg)

    def test_5(self):
        # k1:
        # p: 115919893896012724015263717609686552816717614224601064771289393860129594723705727338284696709867520458133520785168110831899658825098142250839971671064860230868413313427298466011495265874547933692244302666996497186125737776733905093304672515722526192039137463031766047405269149895847986679918342740438552331799
        # q: 142081244359441345533341305254321389309791146259383473735803379669145717185421627109108070510786370328037540793350940825244042931472256677199481229269309575203224586955610280516959787274438131188473068788061075774469230933355717592614021298944626213867881289431439100625000649066731613534979050008200891848659
        # n: 16470042770759897103982315158651032048779987605247056369633753004852056469658520215638764539927983489404755802238866882441990116199134453850254341014529616245428580441988107288144850603878615372126924744339713006280476249083445486634083003345039146495409258882324212937516263140351342719212044989384304331896324402506600940110867649071093814986888116182779678944288860308490495954503331825014149607186457811162621057770634748323975440465028876859823179417222911224699680383369595495411074721714369474215150771467845255513994315838040038305993270640228628818310002912603419553334511682990517135912502578720816261207541
        # e: 3
        # d: 10980028513839931402654876772434021365853325070164704246422502003234704313105680143759176359951988992936503868159244588294660077466089635900169560676353077496952386961325404858763233735919076914751283162893142004186984166055630324422722002230026097663606172588216141958344175426900895146141363326256202887930710934245563657360879362698819871363174404948197129603854511689974147095062802980377837893310535946917633330794743797777887825805638985287855817677925827612418694988657791165921746445710255606222955600008525121702266231418633610413383051217040984274935322773426809603536161256018625023798403457314784544684723
        # k2:
        # p: 164885451748864618608759542487211739442735838557386726239986469697795486470198194963503998318345123742429493401951095195582246779474807195929077304786931628518565946723616329523472044877457400583190963707772193270108919587888655547707199908460088812565429542749578536286992969777547730415591617529985416402333
        # q: 115407503599138307658217684354416567392919526376198300393658709626922015393003558728500356849151776513790104071435836544759890669650359154260960421901971268025332596834373553370331295059072602033643953084583148796386833950774862302124727925482180923418886603000211091286905152641051191177036920089945605468143
        # n: 19029018366152639236959729725193958649319831388167365662104752604265592295868810787802838272475748378031428442625280996949585222296870720130799358113637307255479488222508841311933111960453593621008781878288916049051185026165896236335035445621049645928417781477660246395602693756502913684599554147795993137702420235111486893022853912020701670708409346941816868231767347529686139125348439382981417599646444545169730123791028040974061592112358989057190725178682921127863587526758861589200518260442585330252230771340995641796240588194245338771478860139798177132646439795163069367927741466947224998965659184727887302377619
        # e: 3
        # d: 12686012244101759491306486483462639099546554258778243774736501736177061530579207191868558848317165585354285628416853997966390148197913813420532905409091538170319658815005894207955407973635729080672521252192610699367456684110597490890023630414033097285611854318440164263735129171001942456399702765197328758468093294770759260064391289862573361601049127717922188803422468233574281082323491752859608829652631763275673684211760739489146303108822548471333791634662678820879792655467247804204476613670703551756930569699093533153163223103721213947764621537237271597774749099608853160235895563019084051582020431405304187004763
        # k3:
        # p: 119842856723873620110642917232608451724751601070628754632582121274202517916037643281124092708536155650273563390318171550103495957824997572020018763326095248002810595432160263515837154751339630317347821024178871384710419422604495974376197086944548898786636763314251061814015413065076620157145432295262052375349
        # q: 90316636488645045599816652950118363438076421382409213847048587884840718168214774719773158201975685351518814736904564725912151652008082327276117093338476192126777530466323141969493683639649901601469095046499342809864621715588582556873940342929559222698438730118873394372446674374561194878027720455385772903369
        # n: 10823803726490864446184734955048100321123575846958348760643297555746431467688197007933846571291713925239625570633973883415844575669436088255897009645495299715892196359858916692274048874605191203200177756509892563376177368601705643412553371002398398166518847835412127748353336829466178535167471356670398152320289712861231502623257677610187347207919420459574440074581474556397403067571451387852776195572565957659781440606053879372809045555496381108507155331860097046486441000625991322958483938797774129188932018042153595036355740469436338089015559596667175559503095055128862566587741048199533146220364671323126694650781
        # e: 3
        # d: 7215869150993909630789823303365400214082383897972232507095531703830954311792131338622564380861142616826417047089315922277229717112957392170598006430330199810594797573239277794849365916403460802133451837673261708917451579067803762275035580668265598777679231890274751832235557886310785690111647571113598768213386368912012655971698145360003080261837728291414268070734562564825573220991465979901252629774702744438659374985887428731195598630442200806140679650130350404237901916485005278315435400271189731513410067980983587227853799554162173038510281444528711625345346374463825406934185973839930220790127679048319246248043
        n1 = '0x8277c6554d89f51f8d02c1cd8a51fdf54f3350f01789c0d7806c702cf9ee304ebf2297a844fbf1610c85c3fd8d9372b572cc877507a3bb1c5cf33f0ddcf3163051e279ea3ac01105fe5d95fe1b9f25bd2465d7c8b5dbee72b34dd3348dbfd73dd58b205089184689c328ec71de60b911087a1d2de109510eaab121f7358eb8d13668fc1afe8ce76e2697c740edc8b182233da09434f829d5d366389714d8117f2f83add07ca9aba964751200159f73f168ba6e82c425dfe38b76ebcf05ce9e496afe9ce5f671dae55fb75773aacdb9ee5ee48619f3cce8f08813951191d5034cdec9f3f564152cea845c5addfcdf1f2fdf63bc0b0898e09a2134c17f6c7795f5'
        c1 = '0x94333ec8f04e34818d505506e1e082441ab111ca0f2d8eca737c9a0cf1a23e3e2f8aad55f5a7388858a7b8443e6ce56f9d33fe7b0e46b4fe975924760171359a98e88ce9f40184560eb8bc65d9939da252da12d24bf039db8ddddc103d1fb04b4b4f9aea4aa7c6a7b6016e970c3609d517827b0adb791f26ffea313b48219086c2befcfee6ddb61bd3d93b948db49239ff8cc60a42e3c581d385c1fc3e0503bbf3901b5356ddda44ee36d71c1c63edaec9f18796eb02e9ad8a8c3d969a28adf9619ea0761e76b71b58df640690fdf02a4f2f78f391106a50f02894311bdab86b6b206154d0e64f742e3116b87a223aa9013388643bfe9e74c3859d8ff87e7c6'
        n2 = '0x96bd2606b29df5a1181e7b22a67888e3bacf53cc38e5128d7585565cabc45b02d72040505c0ad32b60393267ad83b2b280af50bdd2a4ab2b40d308c71928f5c727f0dd46659f6a0dccee211b34de4d037f0fb0d1d92ec9451d3d13c386377442ce8995f3be3565fc8df09000d60cdb7ab693217efcfd12c59b60784e0866d838889d2ba88fad96ed8fccc0300276af9597783af74bc425a425241f8ffe637e97caa2a5a9496b13c04db668f4f98c8e9850d10a713bb30dd290b7d879c77a77408ff72a29f12540dd6464204891ec55cd636339f4a08da8867210f3f6052ce643588b8f963d9ede798f7c00ddb76ed8c4e1c5613d037a2c60538f309c64504093'
        c2 = '0x4cee869fe641ee2362449491a384cafe3aef3716a6eaa24589ed2173521dea9e1c6d5a0ee851f80b15ba9853b983880b60b6ed3459b276be57848eccd628220f8883db8fd047e94bfc00aa7349d4fd29d95865c371871c7d9bc69b6a2a1a0d49a7be6eeacd1c12cb21e37ba5051f53f51e79558c8aad57b09e9bff79ff6a39e4c310df577c8b2483ab18b92c15e174b575b8c27c41c1fc5e61412d200d0dc710704afc3b6c3eb1d0e24a5ce3ee89a0b2612aa6dfad761b8a0421dca6cb187e20cea34d46e1deb34175441a69f05d4a8148d312fb0591e55dfd8bc8809a52e4df986ee6b8bd2c9db1f182e5cd41b56e591ce0ceb49cf5cdfc9a36284efce9bc84'
        n3 = '0x55bdb4e2da469efd2667db2991e8a786a0da67e7b557f68765dad072bae7aaf3b02d074c35a581ef6a9e42233b5749612957e3220aa02f640ad2d21916b52cc9aa8fd22b92171bf06c7821655cec1df696b9c80d6a96c75ee43b86a7376a8d75500be128d5510343974fdf1c4b54f50fe64cc8fa0349ffece0b5ede321074d44e91836aed0b71783f0be919fc70b87f4156aa8f0fb3c8aa74ab982c7a2f51d6bb4139e93d03f153d1e1d20f1dca18bd1318812af58a6f56389db7daf0a2aa0a67052511b9d530d010692158acba4503ea7e6d4fa88d5de20562c8a1e12b4a5fd1f922ddfd13c9dfe449af05f148e8f710f706520437f87b0eb059c6d9dd3a39d'
        c3 = '0x3d0a5c653e9d4f41cf01629870c4da1725b7a8ab04dfed25db1268c9c8f791a0022642a711585952be67d51173e76f425bcd4429f160b98004071aca8f1b4de731b7c80a5e40bd15734dd9f379a8fd3f3b8f8246e9a5458a3e8fd2258ec7d1057656734f0b69a64999a4c772d6f203bd01096288133265b1766f5f62fd392631f00c0ef9a199532bafc0631bbdd3a6b996e621b9935ff5db3d12855d45ddc97a2ae32d99ae66fea9f0ec5f00d325517a87c7de9f6bf2c7a5e50ed445cfb6806b823c82aca2533b9c7e8b8463e92905c1d4c3ffa2f33c12884fc1195455018043f3c02c59b8c9e230311e4319ba70f0c6fc3761463f6dc7c58f9fb8e01602e600'
        msg = 'wjczXUtZDzqXgZjwXzllzMofYILmhwTTinNrCaWZOceahLLmTprfiQnBsqIlJaxjmqlaqMlCWFNdngJMCNUKZGNWkdGTCGBUtkdYQ'
        
        check = p3.task_6(n1, c1, n2, c2, n3, c3)
        self.assertEqual(check, msg)

    def test_6(self):
        # k1:
        # p: 174423758269550856732651992941552926176288847346738737886514966185282316480611773484414812139126997156244364828940758444063783552023113692099150487263817920046757761414204801011324932508199898981123437743479646721050813420099984002209112288719693847089672443193499183433294362132473653046542698750733590901877
        # q: 122733722919223982736449502478940114635126348448814965084865856749429183182371484004918843694618168796524174613131078399947632807304689895750644412244455609622152088822926389261039743394204288392094793774146103912479794299021377347209197025545522237385270624825734495488387663345376880070566871689530580987053
        # n: 21407677217984757675483395899852038446720494511382146928178975043961794027688162486984749431164461456388878597478876678613457492000326124327570748040685477508117186820882790044156441317676930788733051431672413494944876909803766687230495940374016009402594009109134568839095012789113092357111812376216523077080538958785735641327919177722528313914347882957259830189175515535168220355603605294868154657498263895181496914957007564012108720236712859039923027096878417081544814475631449329351450534654909092913541784766439881623644050107620344824733429888092680203341579535564747341266144918413593207246706928813999130398481
        # e: 3
        # d: 14271784811989838450322263933234692297813663007588097952119316695974529351792108324656499620776307637592585731652584452408971661333550749551713832027123651672078124547255193362770960878451287192488700954448275663296584606535844458153663960249344006268396006072756379226063341859408728238074541584144348718053494534203031244325633384151405213915690978507642850990802756474822339237293748024919214001109679152819152250343290484778731535918256703634715488131580095701250603083596212092719390572501669937026882368832542753993408961592332655650210080382551642745911090978363675774896308595290495116086398238915823305673035
        # k2:
        # p: 157273517692859317769167747231564449009854809774321049822389557083936102065935692542563013766941180353701437855151130543324584506013139969696247477365478470554909292346295030504450056914114304072633393591193289214709401491668222723725777054387767008623631331731320389538288560865135626071171799419398554571181
        # q: 121087855337739345741099913562129160745857538400556496551294924602937377238949304626656178635604390466198028548931404329738512234619118248783019849438630167312502865191022451307346174824041437341059924638477314391191715338749122598349990168140964426610992536648669610911973344184940995393826664577378230315517
        # n: 19043912958850338573419515175747935198179689724345995847108989386806449191661629802728702575493574978200205888400735458569521060618029319570344002448016259586293101101048662671759978288264773127582330995846561162895767433771885422181896049950956468485492911823190726205756620053336551982175783583325156479059604272033315818226208425653723543919940429137239751111214715149296431961646999979081274282468333790321876374790153306682377285393809656531457682976642610340127574404347052946659724236369669079983733642609305388242162498291305835620927334917977671361703107100207561692898268838907004070441510461268532265315577
        # e: 3
        # d: 12695941972566892382279676783831956798786459816230663898072659591204299461107753201819135050329049985466803925600490305713014040412019546380229334965344173057528734067365775114506652192176515418388220663897707441930511622514590281454597366633970978990328607882127150803837746702224367988117189055550104319372883940440190146375132105328619900206789811192709915709894020445073038988228076654608036726710525479667984605590713847872876125768784932208652277099892334468173441497873156976565285336421008892380026882919756523090840920973925660199234378463632626617645655487885047794965337955904618299317674664847836986952587
        # k3:
        # p: 141345772988794358237508350835663593587860830759404842774518250615714440347037031219564794070509263077673385915598905246526182148818134080029612699159668168371811662571521392905502260190379801339805402645532717846572765938537586486784441456374844041836926786409198656499053467000209460759904158638451399893077
        # q: 120228319836877692664922666856343376947744624609442522233223664119383994973269669761257666893627315122198322065030543725395297089228474219121320866227072949024506495395141829693662439600558017821551750541057108977584345383873748691050215254211937513651667290558439235711403414839061804480762678779916833028679
        # n: 16993764802487475894381604478441704948200687277552174119182614347426658043154640914989739787202038831322622313615711525227710243001935994148227031208726977334766517566826829341157979443282270297592733001975142572272704673329991279410449224828357366548237666352518445557202461526683970875754787832091000310676114495089244029426106024709577857444643407915004758248558476422739295231664453981662359472367677087542044025750448453521291654108923185536415227554064791786386751530736926785625343071284650191220685173118361824572061545609561514343904826165735216707221795794696113467593808448555430316511374823300162674555283
        # e: 3
        # d: 11329176534991650596254402985627803298800458185034782746121742898284438695436427276659826524801359220881748209077141016818473495334623996098818020805817984889844345044551219560771986295521513531728488667983428381515136448886660852940299483218904911032158444235012297038134974351122647250503191888060666873783901947330945571583469062461257233649405201639757273922367156338669464530896098187121024674269027006228114878513212669699580116580584384824842862659118700445993622248513509042017452247662474914706218679954514665165269622858100119444046779636765623434488801145152317050255567711144106034180471990587862961089019
        n1 = '0xa994db295f3d5190e908b0b289c61a330c1786ff525dfbb4c27ad2ae8b4265562c59ae13d038b543682b14c7543d90988fdbd0271b8a2c1d65beff9ac82b7a0f4bba619a8f611b32c366af82737eafc768537a79be18f82e1a712350e19666cedd4bfec62f47983dead2fc80eb69b03a85deeb99c367d6a001b7d7047fc875eae289c3189b2e11b51796cb37f1b1ad279c53fa24ac4b5a2a2e2d31b2915018862302b82ec6ed861f49b8256a62a979996265a663d0e5a2997f62d7a4310f1304098251e17aa7ce1148bc1f1ff6cfc47c8317dfac60ee4d5965c1a8be36f75da588aaef7cef9634cacbcaba06690fc266cb890bb5d1741176c5809f00a71bcf11'
        c1 = '0x548a7b5eaf8026675fbce65ad3896f09474ead51ca6305b3e033ae65cd328badd863cc6e304bfcd1050735e05218a9870b6561ea3c6feb744f583474b9a40a09086a2e6c71b93daa08e7693a7d2613361408946cba8775f232268de917470b570cabc915ea5c1a65a5abf322e14c1380ecae7f7f379dce05a7a2a9f90b36ce170f7326714ac98cf24c02e0882012adc8a32600209c7cec99be658db6751b705c87634e981ff8590c44bd612034ad4053660275f2a7dd525397dc33d7cdb9076c965c196d234575cff83bff1878e7b846ddf2cc616b7b6c04941a444384a4edbc7ee3a1c5e840c3778795476037b88792dc390110b81f0c583c111cc9c5a9a700'
        n2 = '0x96db5a7b3514f03de75dbb1c2ce5459ab964e12a881b32e3cbac8eb928e8cea47b7d0a6c42d4a08252c26df625212a927f292cd0207166951062c5cd765de6e68487cba82e30494686e1c08d61d29f021cfb3db892bada03e360f94c7b8de484ba61b32f7179c19260a63aa3cfa656c23c39df701969d33d8dde91a5e0a5f64890b2deaec38502030e3666276b2d7b730e59dec91631988a3cf170e1f00d9067932749d557cad1c11fc02fb1a2f8f4c4d96b487ef9c5f293efdc98584aca0f47787faf6f15173cc3f8e3c1fbedac1e8455db10c194a501b8b553d81f79511e5502e8bce7a508a50819c21ba2fbf353b821956ae420dd61ad56f3f067a4956cf9'
        c2 = '0x42a12271999bd1d7a5287ec2b9744543b640a50faa74f772f8b0116d774ab85b6de9fa9d1f63be14e1b6dfd8f781deb8639455100d55b1dc989f737600f3e84327e6cc6028de7d2ef7dedea641e81b8720c7f3539ff584ca7bd588e58ce27cfc2a203a27ed9889b7b47f5e44d85dcba8335e5d7a9a086cda642cb1119720e5ba4e9fbb77038e043ec18cf56d048310e5d1f8617110f481636b8ff0ceda3f1b1a15959b21729c8ba0eabcfeb5166b019dfa0bbed13d1702f475fce34eaa662e7150e40f404b40a8f6552f18b76013a693bfa7bdd85399ea4f5a9d5acc553f3b182229d586050ee2082683fb93af408930cff0c20f4185bf3e70f19da3f8800ac1'
        n3 = '0x869dd611ff780c4069cb814691b658c90901a7a4b056b236243c90bb4d844753cfd1014e4d50b718242ab971fe142c69bd5eb033d446dd59d033575f3cd2b0069b5a40df388d24a33bbb301c44590c2d8bc56eb5471db76405e3622a94ba91aa5fca90d610222a9b97e6ddf717a15ddba9c6b1a84660ef8fe3aa28b22e9f5ee21a58570b48134bb864c3c44a6dde64b0cb883186bcb8d9acbca3e67cd398f2648f751722901858c19de2d10ceb8b94dc4b4e9c667ece849cd55f682c814b7ddcc0110a9047779c520a33487512d0b2180bfb9469fa605cc07f9d35a20e8504a23e7e4320da3a4e63378ecc896dc5b9a09cda17ee468cce3a5edc2889e534f993'
        c3 = '0x257b4fe5b8dee7d6bd2d06a8a32cc4243277eb9d8d49e65ee2159346ef1fba25b7e34e48a7d1141fdf3c1e4f6afa33c370d153a39ae98116b0890a737058f45c728c33efdba3136b2439aa042a325f85dfa9e972a9d8824dcec786db351411741e06001b03b80faefc962c16183c6f9a4ccf297a741e11e976ba08a412257f770941459a106ccfb588be384c0a4d8ff92a8f5a0047103a554e3112a5d6afbb0b32637025c4c8c35b45a57914b17b13154c379de2fb2e70099daacd4eb2ddcb66e677825e2d290bb86499e4588ec62aeba2749da23d5e6936afe06cc53942c3e31cce2bf9cab5cd986e17258d7856ebb178b9ff7dedd33b59b558fde23866054c'
        msg = 'UiXNLEXqNYHWadkzOVwJSZvYzKWAOrSWaxNxGaBlMaahfdxkeLAadKJDGvSePVssrrfYFUxPuSkNzTvLyoOPiqbDTtJuJgNUfhCvmQbVdlzsQjxOVRvozyswldmj'

        check = p3.task_6(n1, c1, n2, c2, n3, c3)
        self.assertEqual(check, msg)

    def test_7(self):
        # k1:
        # p: 155337002582967664297719641803879515188532545774720837243729299046707994713950423641670490060721548880935104891155699391544055300664304273296166484451791735703367090379659025738025881162985206828778658066991131026390092680516045439645136115753963405288197840692095499449759509370682763963166925532051699369071
        # q: 144057602890348851682990962905367194501500432436999947425846716123187532425829985443611441165859388310494732508353025315437875148091838960172533431908548162951169137722353755277967597941100016924752820273657697966581694958329816108636341284521344801728418094997389984555331067598178918091143087187364481638687
        # n: 22377476232274249635893566713168838339604623082521676098147346253553731180416782159100706147424506049018612970829324014856703285575896027988614217613413122208326670373158977304374293030154108601158558169327628154570675195912490854335118784507659629613537892507048347602627127259298608775837006925874453784359396959980038324855359026853458868142678164670093369996552987558320724133203634852049599441956402208077970834631609627954755346626260963757840634990711522970586718398225648129803263665177920755838113493173066743219476496263868854324734075163783363789701841726759773219237413737019355292792946920519082084849777
        # e: 3
        # d: 14918317488182833090595711142112558893069748721681117398764897502369154120277854772733804098283004032679075313886216009904468857050597351992409478408942081472217780248772651536249528686769405734105705446218418769713783463941660569556745856338439753075691928338032231735084751506199072517224671283916302522906065043583043338892918877499166414288658754461254432807922274362100552404042569628642878340486547513924360664821400602165182277451669880349581290049567455381288121446749090232524846790715890354723054676554945276151003139083348661850968398509005370388456817194046858490154882106700329073825757938533110602561347
        # k2:
        # p: 102140708909440841764008725810947934212785655698349440780375415032543229640892345901956512060749666901245010917816026566759864595985928218956816090877101156974038500768253499218664344163465338481635923152130218877457751950350222071653102859059424325477874939532205947732045385576987822601172733658312783380761
        # q: 154887564269676554527504798078837861347468498296291555375526281996814907400707587495757529296764333853017798551843204668277946785217873504011456752480218985883420550149891096892459594233009020969545004197214092354420084863237662507720589875352246681860796161695971741317068491125639680405576699625591474303811
        # n: 15820325615761343038631592718282751038285946226720249843832243819990690406840114327093892164694613558654806183107723445584363412568969139582908875032024191187099860770742175084028563842402192337887273734812142822515979729933961419509023459601642239013166947096113452830412616467116882232251965290458835770216901936753183494889864199141099722389691072175321084525388716444719586556377012949574218179588424704564199360483972030097666017323684048200586546172685291900709693654231252143267370895719982937392944882887773822066532801038849466469013369827082515130572485452535227212240050112234739749302381617642263406380171
        # e: 3
        # d: 10546883743840895359087728478855167358857297484480166562554829213327126937893409551395928109796409039103204122071815630389575608379312759721939250021349460791399907180494783389352375894934794891924849156541428548343986486622640946339348973067761492675444631397408968553608410978077921488167976860305890513477763272320002918329048457078139957729420545347550962352821876498460152279556942010784336092153940469206624367342875199241752137294986830985078848886218647838568156402208738364770831304882339051961175970358953007223103309483507721259759784728447229415489209567538033015460624157021408164197088122905572765797067
        # k3:
        # p: 95817585412189961289189852759496164116935090887464661337148267290156560278761277892831073142749571546893259158848697528805456875214171746529976971628674702666475216310694975051191457827439028580089754090538268171175203448285877676566035710406751431530374501583251559038259536728133647458600609293801002029881
        # q: 142158367627882047728930212218277622722209105328741937827548132517280209586582033075719568521642910414444038035623123487895438638538009124964671089927778632073047970080364112527716882211055915898596259222330594914291781764759526966475823683263149529245889441567968295333584017889973050223474064914092585656693
        # n: 13621271532242088527711948737118272781444539657950475287277026420637375743323352195479713311915029566207679837137900189901219149561615304402810935688052288298496215653471870487826062816200279431977680128687134666937312727749547249855479326293461090018303731193897250870325596406057758185080328631177337203085757076728498196160866492279536480940320833142468946489278963377898993007644104876721518951726454749588750995464381658570938728503094778585722989855063009655940827576064579286286183941055482136871081544283556072119445398085124879506057966158611231516592096119534284660929776847445420416148846442231958393643533
        # e: 3
        # d: 9080847688161392351807965824745515187629693105300316858184684280424917162215568130319808874610019710805119891425266793267479433041076869601873957125368192198997477102314580325217375210800186287985120085791423111291541818499698166570319550862307393345535820795931500580217064270705172123386885754118224802057012733850305416101232248143039138102321125964168493260076177985394370825185841043835312206708041511751609132179939891702825221992895065142818894529004370880800869593115680132471517067344658128261597020647124806022652275248052983242010737843294220370543888117588709871038622195218209145644514512016043203971307
        n1 = '0xb1438596608db76b15227a0cb7257b215814c31d1ca942c0df46a46e2ef9ada81295283fb2a39fcec324eecd3626ba8ba20066363eaef3e2bfc8a44e5263de18a58c5282e2a008f70ca90439fc8c6680c822191d7a6ae3d820d462b4782e8744031bd45a37827a9b95c22fc8484ba897e851f19c3b8de93de9315ba06ab1eed781c346d2f60f51e3a5e3becd7215afcecbde33602ce3c58229c24fc971082ed64344c8f4e22c09f0fae727497644e37bdc31d4bafed39945b1fd69f62308382a208680d2f5eb328c784ccb4265d1189578e9468b33e6f27b1a08a1a63f39c88685531af37265b64359250e9a64b75d646b27d7ebf785d9fa5f1e4841cb2ad871'
        c1 = '0x8da6ac4364cf5e4e42388607032ad657ae5ad2aecf8fd47ef5564f07d9329a63faf210fdfd072ad5490e6f60bef067d16cfb6d4a70c40ee63a0f63ec82c849c6b6ff3b55c336dd0010115a8b753f43e0b97a8dc6a6cf5b9baafeab5babde7acef314606c63df78bdec786bc57fd9a7feb4d5818c37eee4521efdb2bafbe60319f0bfbdae6ffce4ce307a7a4ad9055a08a979817a33c763a77e38896e081b91b3121cb7aa59056da0f64334b6ad67000a4e334677e3e4ad5958c4fe59f55d8aacc182a24b4ae5a2a8a70903cd56894616e0f7ef68110e1f02814d0ce5b2d664766a7872aeebbb45f48f3fbb24c857009ac0af0559420db99d468169f050d2d58'
        n2 = '0x7d5234d7bc26d4152b21498bfd209ba6646e507eff781cc3d38e452658bf9c0d0d081474dedd4da4cdc3150ecde526b5182a5437119b500387d05e1d731248466ee47b9af224c2e23bba2396976f3f6d247566cb69aa37d2757b7c5d42e9a375ed8f969c528dd72ad3996bea7e9a7e6b7c58309cdae8d49a4af3b3037b2cb7d08b031d430c4d0e025dc74e7a69c4800c7dc867295feeffe5ade0809a300e684df2e85664b3f1e70a64dd4f120c44f8eb2e4bd5ecf2466e7506f186f21ca9601d73927dac0d5746a39d50fdc5ca48f11cde29e4dc78c2d75d5a9eeae512f3ebf2f29334149dbba0b85f16a39490a98ba2e24671f922f3c99cbff81fdac22f048b'
        c2 = '0x4927c3e212ead805f743d1415882b4384fc74e821e61bb4a17b9be23cf41d4f9420203cd4bae1b922b7a0967f8172e04c39cb510e3ba983b4cbd7a188e7a8b59bc1403564b22f8be985736d6f72dae3afbc1a5459b1a921219b02b8e0aaff5e4ca76accca601ca6a9d6dcc98b191c8eeb55a437cd82199f5790f98b4c3bceeb9497a33f7ae14caaf15c110d3f672c9432861403f54de302828f0e7809e8dbec253a9141a4c4e5bf729b89149e1592f56f2accc819f0692617822d7c5b5fb3e013d995d29048e1603735bae4abc66db636d9058c24e4cc1448a9433db3942cab2237aa4514231006b11380f9481b9bb93c1a46a8faf890a45ba4f36ebf318a3e'
        n3 = '0x6be6b8a57392453d488e5fa7df338e7cf76e2fbc54a2375511a6a819ccdcab8c7f73306a4578002b311898b79e7c22ac35ed8f9c635f03e4873dcf2611ccc1a031ffd7fed6678ecea42a0364990e2d47572f8672fd120e7f126f0b9b1c9077610b21eac17e0dc33bfcaaaae1a51011d8541f0642a37602539df7185897eff644d4c9eff494dcc6610f343eafa6844b2055d96416226182a9b635f64d767a899d1f9b64bf7143b384f8b3d893b948ac189023c2bf355a9ed10289558c6274277d86708c34e1f2601b8ed43edc1b77818494dbd25a30240291e2f19927cd935df2c874f2bf6dfdff93014529d30cba1ccaa747293bb4ff30686b04e710e558e20d'
        c3 = '0xfaf927407a32cb6f680875dcf3f3ee4b51fef94881299f8a740315cfe2a1cb162398aeb92e439bdd528b92bc2809bd5deeb4d8002ef7e629c3423bd4d9169929d042d70e3bdefd3348b7879558a6ff64467e8c757ed9ba0ac844b81e6ba30b575e6f0da49417b0e1a3a554debcd841ee6d6a97b526bd96bfb92951fafccf959d05605bab6d6f7b3a011380594bb2fc683cf6a75f4fbdbe24c37c0a466866a9c915b58dbd1bc2c8e867b45b1a9756c114bbcd59754fc3662eba186a69da14ab4948ec02690f986cb5e67df01044b10555db8f69cd2e5d5a45b6d1872d3fbff6d620a6db86197283e97c620262a92bb1b75e2f3b5d939a4d6d9afd5781ccce359'
        msg = 'IndrPIcqQOCSLJAwJBxKUcIEGoNeOtPvrVYUWOAnAxCxZlWatuqsQElnxWzCGDBrdQIVkUPNAaxNzaaLduEnVLUimwnhnhoD'

        check = p3.task_6(n1, c1, n2, c2, n3, c3)
        self.assertEqual(check, msg)

    def test_8(self):
        # k1:
        # p: 153786324651912283012051598564977364209777947843371290823703133379609565105655376626299579758203469752507253405054186525147248718870321120240730106775906233671314258965547386532193672745026756292850513242078492907855133082367636575125554410104743497859319856756700781084425750023733578295319216393767833955243
        # q: 106837793196288202749119523116284510409123022394136421849888341034702421651409826482752997516074974419419969774870005588499037487104748883353627975398447443355621403329782097276766411418701640918655095732766511448230238422354553752099397235921109262598699580411974123740383235995731839176867457892726336339249
        # n: 16430191549578242819915461272001539258270215064988677441621742123618060239700720840527251558806963795707540404940382384803776413756307042403540549189575347461962167249201899450505913544543623003969631629638753208307857064242130992832914671811885401410119652439480913745093532240428819521578671828048966924701237274069058323535545683436549443050897463893741934054878653233009755529843641242883864885892958099684555857485331038249386195505969847178238551523953792336945029447947228923893840866529172106513817560220832110794942147424083361418943005066687492597023853299344754873497462755226226647321710940815281130232507
        # e: 3
        # d: 10953461033052161879943640848001026172180143376659118294414494749078706826467147227018167705871309197138360269960254923202517609170871361602360366126383564974641444832801266300337275696362415335979754419759168805538571376161420661888609781207923600940079768292987275830062354826952546347719114552032644616467317766634140082033189674876578787450852375282336284228136707839063629028724384026516541539079119770341752422870271230757159939533329851449762795627852959106612062523767932960056587188243629139534874634163991404292571183946240780727812035613774426557710555908117386645781769179471174153233016177685857973292011
        # k2:
        # p: 160965057605535380227347957558419854479002299716985682790155859645216260073876016111144703935680314518039914383132343109866971117397502697087669723439754497081451283123312403070127717954334476298778836226140647432069048208394106338414368219158819696440601421741210973053942867614475835793056433399809646275517
        # q: 137916944095536490544532518866457226315957786803453183091355233607761058393475563027748568403586984238378664771471109610491172024432185826672766588502700517433280043017317320651323141937248690012257768497024292895159180751651613129100939480654076166077310453567519027516559514955438342292517463637834145484207
        # n: 22199808851117433828765218596261762352434859130995352763491192832665640825616639098866955191983128096678900658119987666214312143980917690268449247602408767973711103710879356446251502974509506793879439418298201447925668562840206103301908462155305103197545763464784020677881634448494996298439784766281567797626910066945943057234337224296417836250238304467687083401892535898619157211998867639201653714458821734844616565850252483799246152533752456658111215549205577080521883632541677677299973977381493152009621340773979838189084307290884749037825151940176694612312740515277208746882530992268240421137195489449522094260019
        # e: 3
        # d: 14799872567411622552510145730841174901623239420663568508994128555110427217077759399244636794655418731119267105413325110809541429320611793512299498401605845315807402473919570964167668649673004529252959612198800965283779041893470735534605641436870068798363842309856013785254422965663330865626523177521045198417740789962827990242376895879995306112962229587444429690674016536910786595687677373375173628079702957392131991130432687385925339594615178756233852824842081377338101537600698635719015411659939990465723157367209931907904052220559353046873229493575865833196552426645652497541352406465550828701081061607918868333531
        # k3:
        # p: 103451248299082675887160705964719130430486402661926382639893872823141546770893201099731746313073912283006541318747617751776799237004492153757201072709629926504322910058534242393900418557850513134769580322055419652019019050492052283039800343140168973087571349628503776535971709034630627646787678114263094095501
        # q: 160496959662254422128837359679225622948245881588649855486997627767821446155764799335057777595106864840237284593611439468804418749775335922864128255367170892577231991135149915890924096248394141106017747412552669093435914910166164824292835769246280242728243030546874739695647624449435122981725848135987377191357
        # n: 16603610825267738630287786787869324927667308702434131383255225760259462763370705925104508006226147286303381032565013421127932415376592700372834732102516543315424765058659186714458272409280083265070582021051274499817795621759183379801103939622370331602479131032420485825885914189029584912389087913978960626349792803839868911136561545074798402046069376701637382396302683244806728633183136195703535510434028727197375997102218664781187155923424007771079438500427078733769637198554604412646467122172718923375665411737461506011713535237794458124885302964995498750549555488615706778700690499100369416806384710411387709784857
        # e: 3
        # d: 11069073883511825753525191191912883285111539134956087588836817173506308508913803950069672004150764857535587355043342280751954943584395133581889821401677695543616510039106124476305514939520055510047054680700849666545197081172788919867402626414913554401652754021613657217257276126019723274926058609319307084233019237087938382692363698006102971528460429611591204105450527829477177093504318796845830657683898633382754780793239738373737291957762786462972072781566851943125388198240613502907761738244316179423252056001902278177505734184757494011701777901739366356489160738960218841646047443744202444118580789440758158998667
        n1 = '0x8226f5c4260dbdd6e72fecdce96155550a8317e8670fe2d6643cad88e6f03297e0a06425140d67dea4e3208b0a6eafe3b4f4ca82bb71b84327bd313547a854d2606a3abb2042bb912f7b5d0ca9ccfd622fd43f446396d7b80d282cafd94d3c731dff4c993bbed81b553a7b54b0666fd59c5dab9cd938fb6d7589c90509fa093adbfaa372d9acf67d309f67e8f7dbc813414f8d43d88c75f83d428d4828ebf907cdd6a7d22fef572fbbe69a16ccd6a7b7da129e7150ff1eb4b0e84a0f3dd0741b2fe03ab27dcec72df08a2e947cac5a4bda0059ca9adc94d5004d5eb1e462bccc1cf23e55c492842180e3569e9fc7bf9aa581cb33feccc1221e2a78e313fedabb'
        c1 = '0xd2042b97426121d8b1ff154ee16193d060fe408d2b81a34a0e487e172c0f5788faf0bf30bdb4c57f9bf56526b14fc68884207488284d3eef1cd22c0046116c7f89d86462bf4e71c0088ad8fa91dd9fe60208d65e063d1c8cddaf94a995c240df5f0f995e8a1ce0f8dd56700ef1b8f30cd9f2d456495f2d2d34f2e865ae1610faf6b429d8090d04b543322918fb6bbb660180d30d4aa0e7118862a7adf5924465a15d075801668b590fd925317c501391414ee09e68c22e57e6de61e74cf9e4b14369c875fcdcab0a094ff4b89d68b8b3e9f3211304a616cea0f835f2d633b7896fb3dd43e576e2fa0f03307179c824bf59fa577fbe4c4b31cfd54526f4948e'
        n2 = '0xafdb3a6ef80879f5d8d09a93bac57859bcf6624fe478e5685358ae567bc6037d1bcd5ec8de30e7a6ea617ac2c4a01d74e83b72201c7ce86858ac97e16ef1fec81e8dc08e09c473be5c4096d83624c05579140cf8cdd3f05d404dd9042aad3969aece357c4ddb08251feb2fe68cc62fc5e756adea5a8595e2f2e688b26ae7c6361f85247173cbc866439def2a11128768dfa4057a5003a8922e9da900b25b9242deae65a4c756e5b9eb7445ea4e1aa03dd07543843cc047d66690784b22e0543ad82b016999acdbce367f70af3589ae951dc77be27dab90e6cab066c41ffd1e21ea776c042525fb29e04dd58641b46a31162afacbee15dc4af6f1d97a2db5bf33'
        c2 = '0x160c2c7a9cb8d4c1a42ed2a84b4247672d2b49ea94964492acce18af6d018035a341723c14f6407c119366ea3c1c0b323f3780a875e92cff836c12f45363053635de0dd58721778acae5542c9cfaf4519b8df0ee50fddd8df2d0a1f046808a98ab309e9b633d621afa9ff3141df21b6115664beec6b02fe4d3af35261334cea6cad6a8c599bf140a509b9d8b9bf6c801c25990ba0d63bb4df066a55307117a66cfc9bc151c347549956af31bc89568fd6b63b32dd3091638a9742127ae6c3cb5819ac30264d10093c9e22d470c425fa4088608e1fb130d5d43387ec59801f3e868fae7a06c8e8d27f0524d8cc3fd5d9ac4b5e8f2c68a5b1a9b69e0cbdcea53e7'
        n3 = '0x8386a38973a764534fad0c7fec7473ea4537380fe6a2f68eff14408d72090233fe1b6ba22ab4fdba711c1644d400005433941ee861511153cf586601d702311f4a47214f91898aa19c0856729eae8d5344a30c569beafe0b7b55d2028c2c41836522dc651c71816fdf1bb6801c5a6932a7d5723dd8b3032aa28e5086189eb30b698a0a529506afc9151bdb919e0648592937adaa136a7343f872ffffabd9839f6a57c191acdd754cb4d4e4119408598ea93d3fa32c70f918ce0eb3c6edde95d000feb34592572c627106ae72d2e83ac77c4de19645032fc1a293d1547fc7d18a8bbdda5d861bc944b8a18c38f5b85fc61ea716e375756f87c4ccb2e9b2958319'
        c3 = '0x7e8dd72d7ea14af7ceca40df87e505380509ebe385db9ade29f74f76e09f8f961b381574dd28cc8ca52330cd6eef97a3ffe188a502cbc202ca0722a4568c3d7a69369900b1f2e59df03e71f02e997f2f6bcda0a9fb432ef4a657d676d5328fbca17b0b3607112b50f669426040f6e79aa7f273236709ddbb8803f7a939fc049bb1361490ede6c15aea7fa6eb02677b9bba07d376496ce573551b9c3fa4b54362fd473ec982e63321c4f206e225b43ea2f8fc70943cdea93db6fd91328c12dfb3adc7f46b708a640903f368a65549136cf4e75949bb34d1f201e0ec599980d6f9b59907e0a9d7c4c133b8dbdffbc4e72a25e2f7b94aa404a8ea4425923911dfa4'
        msg = 'JSTWRzIHmknIQkSZXBjMzVUnEIZKrCaNwTYgHcxlpCSfSjcCOyahlokXFaCiMzzRcdBnJuTZISksVWTmoxNQXnDCSOuwSQdyOypXB'

        check = p3.task_6(n1, c1, n2, c2, n3, c3)
        self.assertEqual(check, msg)

    def test_9(self):
        # k1:
        # p: 97139881681343630056061012562536512445527049181113026067307073826041361268706416385915289939032937618248430231486405792553724643689426372715522330003769415550839672772364408038678957274052512164865062682533906264542151576641013060911623208381345626053700243877737274739414464075328486020965070242356495010053
        # q: 149502664593529295032546754322179817696379454721672265980232704961343236328322838505926253556944503170693408964224366740238976806474216308137503415177264032428962853703799174561543554904747200712259538195602022066194922650853747636002915570856988053774067332900004105049765272962321364441333977687634747608947
        # n: 14522671149661037286684477988519685359148673247610871155720126470639206820871652344921532023932315042462648095595451042513351654011678708238802682204023490275801766672452245502473079438360445237800021068739780148278809367077114209103936309351114570498685209324266983393511215995320683601688198048205030980312501429748479173355479128230466751032125012563306286525057354210933296230016301379346083907715381359876048888176116457251544827094876409166845603863430161947913972921979127668557075586673939999562307335364986970030729058291094773810100193715466671443057448127316645029975042091350815807999229697817678477744191
        # e: 3
        # d: 9681780766440691524456318659013123572765782165073914103813417647092804547247768229947688015954876694975098730396967361675567769341119138825868454802682326850534511114968163668315386292240296825200014045826520098852539578051409472735957539567409713665790139549511322262340810663547122401125465365470020653541503191468136200286927013642388023134655404039602334155339876288097274421612848082969494909479602612724738032653603789812501417096475177657328385412166085666622780263668642723971235382996760191123455156324567361133327989375733342075457103290818891842153120367025935766790574902875443971691287099925124823416795
        # k2:
        # p: 101357600050379931906553390795874729218858266716216621311524180506715386793709745300407029656289353485879254118140682587771953161869686826831504367765246815141429452244835279168287948070927957495889791186114891776491618210418929233950797095863910242538446687500111698385840075833945663218553247598562918518473
        # q: 125895527920309400874067522766355942531358576963260307596957677255886444980076946215287182584497795082432859400796560387162925027624990482340936508582866986828452606553845233436484104816905945531728801673824976396620314832785189518040210219580362083683174142988053012801755229560094707955773944048961790089027
        # n: 12760468567078160253998165182423266971722702504086145158891766564262823254801497213005060236306167312587366393793752578049257119228641592551503828701410419687455599457668718068284411184932491915292258048085934548789343235938581055582393036492282616705920193455073722792884657072033205368355889918711411220845815303891176428385633591717311783283018415656399276907783369769442712307375938295466329719978672958725353446206257281556112532040910139572913194812724327643248392589590844767005623453066837485827038195583150168261020486735279409249957475940227742513364644302216830832490610459227159059557959757847093614095771
        # e: 3
        # d: 8506979044718773502665443454948844647815135002724096772594511042841882169867664808670040157537444875058244262529168385366171412819094395034335885800940279791637066305112478712189607456621661276861505365390623032526228823959054037054928690994855077803946795636715815195256438048022136912237259945807607480563725367175470492701901980535833035074178799208479866652583258607786740317068101069300423671825257206771360888458213359054118435900943641509160502624250809227519007020528109502933900933452669055199613068482140200058605702461383526998644312416522313458095348981152444080868676769222079125589088377466379270325515
        # k3:
        # p: 149006360535493898320868615090034658650923438180593099008355524302443869719409113920322169499829746334038619752501689147359082200992743333297871780625606736137403409253530435820678778518751443261341567209658698840130398437241789906649844860074769884188444967581336390645672597251267584680310914960863854861653
        # q: 148139148218111711780084281731016040355255133338698646522008274998930945849385926113978358910328558545314862462760376827549647103935365261516653132576686732257535364540686670929343942715894929705116689742064931123042888551440823796371330392362927333948572316965722642633620753903249910062059612673775048993257
        # n: 22073675328808922218969077383885930584432710365968144680747568018545759171258152319255034119452525700478199325264207989453024573409164543516929995294019811198318295012128086228244474035052877737062368719246805474026851125383786398150725152923106284002844552569236420005061437693514950018353394181675013794490106347470025288534698223702736311725959503919923671268926281371149619810651550323257165215856032472057046497589307139841909532221052990387362879930159156573576471796135339347171368574497795110416372189149312857828960539924281072921934264951552953787898318493990987810766389409179458260039250794033322664873821
        # e: 3
        # d: 14715783552539281479312718255923953722955140243978763120498378679030506114172101546170022746301683800318799550176138659635349715606109695677953330196013207465545530008085390818829649356701918491374912479497870316017900750255857598767150101948737522668563035046157613336707625129009966678902262787783342529659872801307514455283064847203943507351302216898936253015597278381232163330055170188815243124963916111451795343582696715911333868610749921195032236677971242070121022014894081493614230568842099158299942621465059485243858168623732306145942059799410171046507534139629285851658064038683293843531253510932455840679275
        n1 = '0x730aaddbe6b446238c5578f33dfc0658127e728c4993b85d5029530693411eeb0782b0ad0104ad396079b96f2529752e9671d9f330a1af748693ec774144f387f127c04242be4a0b0865e254904b08995cf35595f0d4326973fe80e79702d1ff4107399b3a9c8be139cd09be9af06f05d195c091e3a50cf5541d96ffe84a2b9025182cc4f0be75958496c58b37e8cbd3bd83c7bf5692aea2f74c20b09479df5ccdd03477563f1ce60bb5795ed530d384a15bb20ffe61ec5d244c564d5145a8bb5bd1922895ff256850a3fbf3a68533d8ca86545b541340c271e99c12691d02ca73c19e0b1716067e81bf3c4b06e56c0a5a0a278e189b0d9c339d1746597b583f'
        c1 = '0x17ff30bf8da1f43aedee0ef084d38c1986463095b063bd76df5961810841cfdec9c03447cd7fd291bed7b21273552d29ce942e26531615b88fe0fc30efe777fc798256b90ce91487eda9abda9ba816ab98906b59a830afcd25f343a1dff851a0c08972b61b1d78ed5a379b88558ed7387410d290ef79953f11a1169f6e137180034d71d4cc6f0a94542462e05593f84dad5176ec48b831fe39147910e3555c90ddd2d23fee79298bd5d4156f53aefd010141a9c76772c37658b8a2011d712fb1d206d5b4a6e1b1ea11dd0352d5eeb38eab0fc6fa5f1f01f1025a0c834171d114c1ea49ab6ec2dad027c5ceaa79a0be66e270e409b558'
        n2 = '0x651516fccdac99e6f5ebd2d2384fbe5094dac20b6ede7d64888813fd6c14ac10ac04752030b7acfb737b1163835dce809387f94b3a78703a06ba69ff1a35c7a03ef81fa4021bd56c6c9135e13c35bccd7f18f56d86595d4b5bd5c31d507f57ae7953f1f7ee5b5e9dd831a41bd094ef053579dd3e5d329f4310cf0d1b5a91a264bff9bbcae834b8c587d4541b1f0fe972966b609690c162025e7fbc1d0992abb93379631df8d769c219a0a944f29e3425656ddded5f3db5ab9d8fc8dfa5a932a141ba3c22b1cff7f98b4fb5b6702a5a933bf4ce2cdf23a7a6856b644ed28abba9b772a10208623191cbe3f7e6bef9485806a3edc367a7eb34cebe53ccfdaa2d9b'
        c2 = '0x17ff30bf8da1f43aedee0ef084d38c1986463095b063bd76df5961810841cfdec9c03447cd7fd291bed7b21273552d29ce942e26531615b88fe0fc30efe777fc798256b90ce91487eda9abda9ba816ab98906b59a830afcd25f343a1dff851a0c08972b61b1d78ed5a379b88558ed7387410d290ef79953f11a1169f6e137180034d71d4cc6f0a94542462e05593f84dad5176ec48b831fe39147910e3555c90ddd2d23fee79298bd5d4156f53aefd010141a9c76772c37658b8a2011d712fb1d206d5b4a6e1b1ea11dd0352d5eeb38eab0fc6fa5f1f01f1025a0c834171d114c1ea49ab6ec2dad027c5ceaa79a0be66e270e409b558'
        n3 = '0xaedb70d4b463bfab0dde384b1ddeff25ae3dd42ddc2d7bc05d515b76d2b9ca5de8ff0017cba821d1868f1825a4f1ef637e7d43e0ea589174967bc19dd9aa93ea41978a13eaa86fcb477812ffd5e3771115f1f31b632e4b589862d15e683537caabdfaf28586a3d05dd4d1c364136dcbc252889709c6b13f39ffb480b035aa790ff8f841e3fe2d8ca4dc9af7af9ef161454f2b12b4bbe486a40eaa0521f79a46d3714463719425e153a009f5fba4aabc83d326ec33de7f25089e312a40e643e918bc01ffd294f0b5b659fe35f4d573ec660fc89467975c23ce7f10ea0d4c6884f26616d43dbe4e206da21d6fc5ca8f5d6deb01a775c04d4a2619d08134f4b4f5d'
        c3 = '0x17ff30bf8da1f43aedee0ef084d38c1986463095b063bd76df5961810841cfdec9c03447cd7fd291bed7b21273552d29ce942e26531615b88fe0fc30efe777fc798256b90ce91487eda9abda9ba816ab98906b59a830afcd25f343a1dff851a0c08972b61b1d78ed5a379b88558ed7387410d290ef79953f11a1169f6e137180034d71d4cc6f0a94542462e05593f84dad5176ec48b831fe39147910e3555c90ddd2d23fee79298bd5d4156f53aefd010141a9c76772c37658b8a2011d712fb1d206d5b4a6e1b1ea11dd0352d5eeb38eab0fc6fa5f1f01f1025a0c834171d114c1ea49ab6ec2dad027c5ceaa79a0be66e270e409b558'
        msg = 'tJefDjbngHSwFgguOTHnYFuvbaJdAUBiFRhPiNljyixFgMkBjHWkpafquxaAZRKddveRYhSPYvClJoBtSf'

        check = p3.task_6(n1, c1, n2, c2, n3, c3)
        self.assertEqual(check, msg)

    def test_10(self):
        # k1:
        # p: 101501434441007386366788814927632590577781902072640730783889709061863445386276950238983459578491057254683672776271602277213442149979044866038618198996347747771696769461765170710791360421293011371252672280464697809643123635854909980699895171384831880317111871755764111148934148585811436301948895365300148165639
        # q: 123739012992541352073792484025507257070071825698920874900494361442464767690038846962523289517072641903202619821760623485042992398400447796232429928423367910543998489775325557250343198972240892606191860128319984711637102475109619415868436130485204959707607013595720761117771509573972427655944033304655460349449
        # n: 12559687315057397251235596057829156207466374647506407932006078876367839539092478555192720700273403178488539211607619133797664589868774996917162817512715190037920026049143075769335933047029781050859656326431141383024765721532253595579941630328083952175453947782856837593647188505501755588228522774219589530028576021062412700665916290432812529669640380875379486092621871731831738703375437600559433301404210759182597362610062422307601945856008165864077842880758139148738645344305984348516657107086566341992832814079305240682755164975923913707884988682601165426806673142310650885850680146562497406921896066677215274382911
        # e: 3
        # d: 8373124876704931500823730705219437471644249765004271954670719250911893026061652370128480466848935452325692807738412755865109726579183331278108545008476793358613350699428717179557288698019854033906437550954094255349843814354835730386627753552055968116969298521904558395764792337001170392152348516146393020018900520409986101284983806089239593214661684765071949657958325107551606993532747868905284368205764706683140713341353464363563674205085782134537863168892282326948633390045929080370348365128688292010258854447013705440983292576639589540877771587154085724521302837972777342389316325601809028642668758671506443911883
        # k2:
        # p: 136491536445033721458250113115897169293557197695374362096953664691610479906903239463379386100849093922982268991932823073262688862527865176281557321869743784747303753048876787701519166426500037563211991584796148866756399465476013103085229527031942229257886062401087415945035190359764564751081866388481027115747
        # q: 156458410662776048977593010349015475041013070289656687059052245550710551554187390676645906691724157376517937497875622637492326036054908492213838628715897956863717049663071772616181672112563984748739483238446374111868470350147373289423282758076332526125811071991517887240546759205789423997370567022894354453771
        # n: 21355248861110349699661285215728097540991584311987382305861369960148459232006461013967627115780929690510704855870618688341704372196271543476761123603839609393995671019941434610449768720016038536262829095803298677132876709953765602984637962168228603523593642165544289563904482188417160772789084013699422703144827992702702553120650393391419264271671209257578749533732756165179215225133615905599640493961027854791066205591310188092805580233850867905621120939915180378946633832683982252814821140800896240994230277004711234488526225347617081591683346766333264328087431289627725764798740675410070897715768587934947777631937
        # e: 3
        # d: 14236832574073566466440856810485398360661056207991588203907579973432306154670974009311751410520619793673803237247079125561136248130847695651174082402559739595997114013294289740299845813344025690841886063868865784755251139969177068656425308112152402349062428110362859709269654792278107181859389342466281802096356695170396495566809700178636234418224425993062478989717833503291262795781683516973076800778969735661043999401001161588033710223512062824750483326219692424890408686648022461664746868174554812454852534787645807673267570354662463466116556320816659715135822770156746974408772483896344605978210769682381597374947
        # k3:
        # p: 102201732753543073586673859668851421301768222832512069493453301191767210580009055812986286557433334915528875668887109637839994817393702820239331452497793307813642776213521515482606915513841699890905660795158162864156727268150003014820973808631300626162366253101430896296002814231238055175954422241682103569789
        # q: 163318897974892692619370979023819827852415973363197804350979868710913755190054945752511856159693459628551739203665817387137455936261309186781993083686726896750202272780831999108273151639991222076748486739676605176543205488430918438351579782414328507837179651743582673051764195876973605489433789137181404472619
        # n: 16691474364433150054632375480208940648939129934767848711801321386833592557094154428729629348234310454975111570178283720099436696489917752191852733399218637511467793173207778431864029081054689532411673764521559248421865958735224463959471410041561026124106877404726838433810820351140550823161419164011372678572838926158803122168978486822089095601736080757304900602046871529725805554649320237327071410581636721741079498662764482007812967239116822612908769537336091069020540009477848189843727605601157150704885782021907967195687749544455420362031863160629371952188498469173118645295231908967185324437575339621110806107391
        # e: 3
        # d: 11127649576288766703088250320139293765959419956511899141200880924555728371396102952486419565489540303316741046785522480066291130993278501461235155599479091674311862115471852287909352720703126354941115843014372832281243972490149642639647606694374017416071251603151225622540546900760367215440946109340915119048382270352049790935181627988930949568387931040739460485468292239882083059252837490507715511909673284797999255860141036655223677656974540403924963334101047242971129973655663116835231692298216152491487756324715466103325211191916332605906206379722495212125968376218736717298309932572649109181458085494831532043323
        n1 = '0x637dec615bd9c6d646641c28ef786e38510750e18d56cafde96b7cd85ed10c71ae954b6b51ed2ee2eebc0a9059ece57a7cd16af7a1217f24db69b5f0df5070c635b5caf741bc88d499ea65e2ed484c06f51e6551102b3f6e7449fa760c40b023c77add3e156d0f72a002d08ec99f6b1bf6cf2fec10a9d1dc4835cf78a688aac055821682d4d1b7d49787c49488f5c299750862c2bc042e17a175a731da94bc2315cbc818a3cbdb8fde023ca3b6998ce8fc4b080669c9c741b35e6d3c70b85d716a2f81e24ca4466728aab0603d317907967c3b5606b4a489f11fff89ed9574e6daa32180e171e4888f15edad3282c28a9b4555ce60bc6f8b09e1decafcaab63f'
        c1 = '0xadc1612266f2f884f41a48e1eaceeec9f69eebdcf4ddf8027734a7e005155701752fd82d25a8162f11c38a0b46e432aee6d08b7d8e1700dfb51d7fe05801806ff42d5c420bb03363fc8d83a06b36c519607c572ad1a26d1317ed735f0b3b670a5fca9dea2ac9379c5100c4f824dfed84e3b4c095979c1a08eeec6af21da20f22597a988c25b46f6073056838214ab5b599d8df2abbd819c63bb69466de72bc830982bc53e1a9eefaae506eb8d557819a523af84cc4250435fd16be5e6886e45f607e94ba1a59518f2a7eadd04155b1a9a4c90fcea8f5b40'
        n2 = '0xa92a893c693475ec4eb3c74fcb42e26f4ffc9653e4cb40c6d8a2ad91655380f3e1a6c2846524fd371a240f5d6f89843f8ab60ab74ca2ea0e9904517d816005232292a4dabd4d1009d38d512db0394f34e898bfa3e60e7c244b75100559e842f6e304985a1707c560391719f8ade46ee15b37741f4415fd6357a44e0cf5cd5a16f14623c1633719de0c0c056af835bcf30acebd5fafb34d6cec15ec3901dfbcffeae1981d587a5df1c7595783458b3767c8f2b11a502cee73a05cbb9a0a05e412609472d7cbdda78fef3a2607b20babfc93591b4eb140f3ebe35733501f96d487044e6246cc932a003acdf564ba8bff5cc9a8a96c9487f212f6f665645732d6c1'
        c2 = '0xadc1612266f2f884f41a48e1eaceeec9f69eebdcf4ddf8027734a7e005155701752fd82d25a8162f11c38a0b46e432aee6d08b7d8e1700dfb51d7fe05801806ff42d5c420bb03363fc8d83a06b36c519607c572ad1a26d1317ed735f0b3b670a5fca9dea2ac9379c5100c4f824dfed84e3b4c095979c1a08eeec6af21da20f22597a988c25b46f6073056838214ab5b599d8df2abbd819c63bb69466de72bc830982bc53e1a9eefaae506eb8d557819a523af84cc4250435fd16be5e6886e45f607e94ba1a59518f2a7eadd04155b1a9a4c90fcea8f5b40'
        n3 = '0x8438d176eaade0d14acd4ebe09f185bb11e6c1cca281f444ca589da8cb5b9cd9872ade1ce1b7d5e74e509a22c8f7daef5937eaa92588be7df1dc6bc5feee775d64b7daf159e6596552cd36042fb54d6e16866ac5c210288f0ac0cab002987913d44c9a3aa508a1c0138e4e04a276229f4217fd8dd1c6676f6c109861bf9d26bfe5e16f13b8bbbedeaa5620cd56f000f3308192dc835c7830eea6d16a73e2229142c572c1138549790e3fb2e61f5e3e815494ebe598bfe6788dbacf1488e0f9b1181b9c89b2602e06c4947e3b90f5d37d7472875b5d4e0eda49ed4e5ce115cc01158f2812439d42e1d4804ce06aee2f1844ee1efcd4e17abdc9059ce7008e54ff'
        c3 = '0xadc1612266f2f884f41a48e1eaceeec9f69eebdcf4ddf8027734a7e005155701752fd82d25a8162f11c38a0b46e432aee6d08b7d8e1700dfb51d7fe05801806ff42d5c420bb03363fc8d83a06b36c519607c572ad1a26d1317ed735f0b3b670a5fca9dea2ac9379c5100c4f824dfed84e3b4c095979c1a08eeec6af21da20f22597a988c25b46f6073056838214ab5b599d8df2abbd819c63bb69466de72bc830982bc53e1a9eefaae506eb8d557819a523af84cc4250435fd16be5e6886e45f607e94ba1a59518f2a7eadd04155b1a9a4c90fcea8f5b40'
        msg = 'YHNVItYRvSULKPkKEPhnzdpJcShNOuIYYCZWEaIfWHOHtXQHPSbVkwAJAVIpYFWDbOhncYoT'

        check = p3.task_6(n1, c1, n2, c2, n3, c3)
        self.assertEqual(check, msg)

if __name__ == '__main__':
    unittest.main()